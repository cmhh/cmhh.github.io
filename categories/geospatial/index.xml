<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Geospatial on cmhh</title>
    <link>/categories/geospatial/</link>
    <description>Recent content in Geospatial on cmhh</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 26 Jan 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/categories/geospatial/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Web Maps and Tiles with QGIS</title>
      <link>/post/qgis/</link>
      <pubDate>Thu, 26 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/qgis/</guid>
      <description>Overview In an earlier post, we looked at how to style a map using TileMill (actually, using a fork called TileOven), render tiles with Mapnik, and finally serve tiles using TileStache.
Serving tiles in this way is useful, avoiding the need to bundle potentially large features with an online map or web app. At the same time, the outlined process is a little involved.
In this post we look at the open source Quantum GIS.</description>
    </item>
    
    <item>
      <title>Serving Geospatial Features with Mapnik and TileStache</title>
      <link>/post/tiles/</link>
      <pubDate>Mon, 28 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>/post/tiles/</guid>
      <description>Overview When making maps for display on the web, the size of the various objects being rendered can quickly become overwhelming. For example, a polygon feature class containing New Zealand Meshblocks, a set of roughly 40,000 mutually exclusive and exhaustive polygons, is more than 100MB when stored as a shapefile, but much larger uncompressed and rendered in a browser window.
There are various approaches one can take to attempt to deal with this issue, though useful solutions tend to depend on server-side processing.</description>
    </item>
    
    <item>
      <title>Routing in R Using the Open Source Routing Machine (OSRM)</title>
      <link>/post/routing/</link>
      <pubDate>Sun, 27 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>/post/routing/</guid>
      <description>Overview I often find myself needing to establish the travel time or distance between arrays of addresses. In the past I have used ArcMap’s Network Analyst tool, but have found the syntax to be clunky at best, and the performance to be very mediocre. And, besides, I am often working in R and sometimes it’s nice to be able to do everything in the one environment, rather than doing the routing in Python, say, and then using the results in R.</description>
    </item>
    
  </channel>
</rss>