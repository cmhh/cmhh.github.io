<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>cmhh</title>
    <link>/index.xml</link>
    <description>Recent content on cmhh</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 26 Jan 2017 00:00:00 +0000</lastBuildDate>
    <atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Web Maps and Tiles with QGIS</title>
      <link>/post/qgis/</link>
      <pubDate>Thu, 26 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/qgis/</guid>
      <description>&lt;!-- BLOGDOWN-BODY-BEFORE

/BLOGDOWN-BODY-BEFORE --&gt;

&lt;p&gt;&lt;link rel=&#34;stylesheet&#34; type=&#34;text/css&#34; href=&#34;./css/custom.css&#34;&gt;&lt;/p&gt;
&lt;div id=&#34;overview&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Overview&lt;/h1&gt;
&lt;p&gt;In an &lt;a href=&#34;../tiles/index.html&#34;&gt;earlier post&lt;/a&gt;, we looked at how to style a map using &lt;a href=&#34;https://tilemill-project.github.io/tilemill/&#34;&gt;TileMill&lt;/a&gt; (actually, using a fork called &lt;a href=&#34;https://github.com/florianf/tileoven&#34;&gt;TileOven&lt;/a&gt;), render tiles with &lt;a href=&#34;http://mapnik.org/&#34;&gt;Mapnik&lt;/a&gt;, and finally serve tiles using &lt;a href=&#34;http://tilestache.org/&#34;&gt;TileStache&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Serving tiles in this way is useful, avoiding the need to bundle potentially large features with an online map or web app. At the same time, the outlined process is a little involved.&lt;/p&gt;
&lt;p&gt;In this post we look at the open source &lt;a href=&#34;http://www.qgis.org/en/site/&#34;&gt;Quantum GIS&lt;/a&gt;. QGIS provides functionality to publish maps as WMS / WFS / WCS services, and so we look at how this is done.&lt;/p&gt;
&lt;p&gt;QGIS is made extensible via plugins, and this is a strong feature of the product. We also look at a plugin called &lt;a href=&#34;https://bitbucket.org/we-do-it/qgis-latlongo-stage-1&#34;&gt;QMetaTiles&lt;/a&gt; which can make a set of static tiles which can be combined with a web server to be used as a standard tile service.&lt;/p&gt;
&lt;!--
Finally, we consider
[QGIS Web Client](http://www.qgis.org/en/site/about/features.html#qgis-web-client),
a means of publishing QGIS projects on the web.  While not producing a service
in the same way as the other features considered, this is still a useful
feature worth looking at.
--&gt;
&lt;/div&gt;
&lt;div id=&#34;prerequisites&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Prerequisites&lt;/h1&gt;
&lt;p&gt;In this post we outline the steps required on a Debian-based Linux distribution (Ubuntu or Debian). However, for the most part, things should be able to be adapted for use on a Windows platform.&lt;/p&gt;
&lt;div id=&#34;qgis-qgis-server&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;QGIS + QGIS Server&lt;/h2&gt;
&lt;p&gt;To install, simply run:&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;sudo apt-get install qgis qgis-server&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The version of QGIS available will likely be an older, LTS version. If a newer version is desired, simply follow the instructions provided on the QGIS website. In the case of Ubuntu / Debian Linux:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.qgis.org/en/site/forusers/alldownloads.html#debian-ubuntu&#34;&gt;QGIS Installers&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;fastcgi-nginx&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;fastcgi + NGINX&lt;/h2&gt;
&lt;p&gt;To deploy QGIS maps as a service, a CGI-enabled web server is required. For illustration here we use &lt;a href=&#34;https://www.nginx.com/&#34;&gt;NGINX&lt;/a&gt; and FastCGI. But &lt;a href=&#34;https://httpd.apache.org/&#34;&gt;Apache&lt;/a&gt; is relatively easy to use on both Linux and Windows users. Windows users might find it easy to use IIS and &lt;a href=&#34;https://www.iis.net/downloads/microsoft/fastcgi-for-iis&#34;&gt;FastCGI for IIS&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Regardless, to install both NGINX and fastcgi:&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;sudo apt-get install nginx fcgiwrap&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To enable CGI, modify the NGINX default config (probably something like &lt;code&gt;/etc/nginx/sites-available/default&lt;/code&gt;) so it looks as follows:&lt;/p&gt;
&lt;pre class=&#34;asis&#34;&gt;&lt;code&gt;...

server {

  ...

  location /cgi-bin/ {
    gzip off;
    include fastcgi_params;
    fastcgi_param SCRIPT_FILENAME /usr/lib$fastcgi_script_name;
    fastcgi_pass unix:/var/run/fcgiwrap.socket;
  }
   
  ...

}

...&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When done, test the config and restart NGINX if all is well:&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;sudo /etc/init.d/nginx configtest &amp;amp;&amp;amp; sudo /etc/init.d/nginx reload&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To conduct a quick test, we can make a little CGI script. On my machine, I created a file called &lt;code&gt;/usr/lib/cgi-bin/hello.cgi&lt;/code&gt; with the following content:&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;#!/usr/bin/python
print &amp;quot;Content-type: text/html\n\n&amp;quot;
print &amp;quot;&amp;lt;html&amp;gt;&amp;lt;head&amp;gt;&amp;lt;title&amp;gt;Hello, World!&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt;\n&amp;quot;
print &amp;quot;&amp;lt;body&amp;gt;&amp;lt;h1&amp;gt;Hello, World!&amp;lt;/h1&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;\n&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The file needs to be made readable and executable, so:&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;sudo chmod go+rx /usr/lib/cgi-bin/hello.cgi&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then, browsing to &lt;code&gt;http://localhost/test/hello.cgi&lt;/code&gt; will yield something like:&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;./img/qgis/hello.png&#34; alt=&#34;hello.cgi&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;hello.cgi&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;publish-qgis-maps-via-wms&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Publish QGIS Maps via WMS&lt;/h1&gt;
&lt;p&gt;Here we’ll consider just two simple examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;several polygon feature classes from SQLite&lt;/li&gt;
&lt;li&gt;several rasters from geoTIFF files.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(It had been my intention to use shapefiles for the polygon features, but QGIS kept crashing when adding labels to the Area Unit layer, and when setting the rendering option ‘only draw labels which fit completely within feature’–the exact same feature class exported to SQLite does not seem to have this issue.)&lt;/p&gt;
&lt;p&gt;In each case we will use R to demonstrate consumption of the service using the &lt;code&gt;leaflet&lt;/code&gt; package, and the &lt;code&gt;addWMSTiles&lt;/code&gt; function.&lt;/p&gt;
&lt;p&gt;As a shortcut, the two projects have been archived and uploaded to GitHub at:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/cmhh/spatialdata/raw/master/qgs/2013.zip&#34;&gt;2013.zip&lt;/a&gt; &lt;a href=&#34;https://github.com/cmhh/spatialdata/raw/master/qgs/2013.zip&#34;&gt;2013.zip&lt;/a&gt;&lt;/p&gt;
&lt;div id=&#34;polygons&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Polygons&lt;/h2&gt;
&lt;p&gt;We start QGIS, and we load 4 polygon feature classes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MB2013&lt;/li&gt;
&lt;li&gt;AU2013&lt;/li&gt;
&lt;li&gt;TA2013&lt;/li&gt;
&lt;li&gt;REGC2013&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The project is saved as &lt;code&gt;~/Maps/2013/2013.qgs&lt;/code&gt;, and each of the included feature classes is saved in the same directory as the project. In addition we also place a copy of &lt;code&gt;/usr/lib/cgi-bin/qgis-mapserve.fcgi&lt;/code&gt; in the directory.&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;./img/qgis/qgis.2013.01.png&#34; alt=&#34;2013.qgs&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;&lt;code&gt;2013.qgs&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Only basic styling is applied–simple black outlines for each feature class, and labels only visible at certain scales.&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;./img/qgis/qgis.2013.02.png&#34; alt=&#34;Style&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;Style&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;./img/qgis/qgis.2013.03.png&#34; alt=&#34;Labels&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;Labels&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Next, to enable the map as a web service, open the the project properties (CTRL + SHIFT + P), and select ‘OWS Server’. There, check the ‘Service capabilites’ box, and also the ‘Use layer ids as names’ box. To enable WFS, also check each box in the ‘Published’ column in the table under the section labelled ‘WFS capabilities (also influences DXF export)’. Click the ‘Launch’ button in the ‘Test configuration’ section to confirm everything is okay, the click ‘OK’, and save the project.&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;./img/qgis/qgis.2013.04.png&#34; alt=&#34;OWS server&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;OWS server&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;At this point, the service isn’t yet published. To do this, first ensure that the ‘Save paths’ option in the project properties is set to ‘relative’:&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;./img/qgis/qgis.2013.05.png&#34; alt=&#34;General settings&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;General settings&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Then, copy the project to &lt;code&gt;/usr/lib/cgi-bin/&lt;/code&gt;, which is where the webserver is configured to run CGI scripts from (of course, modify this as you see fit if you have decided, for safety reasons or otherwise, to serve CGI content from a different location):&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;sudo cp -R ~/Maps/2013 /usr/lib/cgi-bin/
sudo chmod -R go+rx /usr/lib/cgi-bin/2013&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If all is well, you should get a response at the following URI:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;http://localhost/cgi-bin/2013/qgis_mapserv.fcgi?service=wms&amp;amp;request=getcapabilities&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The result should be an XML file describing the service. It is, of course, possible to get images directly from the service given the right set of parameters. For example:&lt;/p&gt;
&lt;pre class=&#34;asis&#34;&gt;&lt;code&gt;https://localhost/cgi-bin/2013/qgis_mapserv.fcgi?&amp;amp;SERVICE=WMS&amp;amp;REQUEST=GetMap&amp;amp;VERSION=1.1.1&amp;amp;LAYERS=REGC2013&amp;amp;STYLES=&amp;amp;FORMAT=image%2Fpng&amp;amp;TRANSPARENT=true&amp;amp;HEIGHT=256&amp;amp;WIDTH=256&amp;amp;SRS=EPSG%3A2193&amp;amp;BBOX=1089971.21440,4747987.36420,2470042.12700,6194308.49260&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;yields the following thumbnail:&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;./img/qgis/qgis_mapserv.01.png&#34; alt=&#34;GetMap&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;&lt;code&gt;GetMap&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;As a further example, we use R to create a leaflet map containing each layer:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(leaflet)

uri &amp;lt;- &amp;quot;https://localhost/cgi-bin/2013/qgis_mapserv.fcgi?&amp;quot;

leaflet() %&amp;gt;%
  addTiles() %&amp;gt;%
  fitBounds(167, -48, 179, -34) %&amp;gt;%
  addWMSTiles(baseUrl=uri, 
              layers=&amp;quot;REGC2013&amp;quot;,
              options = WMSTileOptions(format = &amp;quot;image/png&amp;quot;, transparent = TRUE),
              group = &amp;quot;Regional Council&amp;quot;) %&amp;gt;%
  addWMSTiles(baseUrl=uri,
              layers=&amp;quot;TA2013&amp;quot;,
              options = WMSTileOptions(format = &amp;quot;image/png&amp;quot;, transparent = TRUE),
              group = &amp;quot;Territorial Authority&amp;quot;) %&amp;gt;%
  addWMSTiles(baseUrl=uri,
              layers=&amp;quot;AU2013&amp;quot;,
              options = WMSTileOptions(format = &amp;quot;image/png&amp;quot;, transparent = TRUE),
              group = &amp;quot;Area Unit&amp;quot;) %&amp;gt;%
  addWMSTiles(baseUrl=uri,
              layers=&amp;quot;MB2013&amp;quot;,
              options = WMSTileOptions(format = &amp;quot;image/png&amp;quot;, transparent = TRUE),
              group = &amp;quot;Meshblock&amp;quot;) %&amp;gt;%
  addLayersControl(baseGroups = c(&amp;quot;Regional Council&amp;quot;, &amp;quot;Territorial Authority&amp;quot;,
                                  &amp;quot;Area Unit&amp;quot;, &amp;quot;Meshblock&amp;quot;),
                   options = layersControlOptions(collapsed = FALSE))&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;./img/qgis/leaflet.01.png&#34; alt=&#34;leaflet&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;leaflet&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;rasters&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Rasters&lt;/h2&gt;
&lt;p&gt;We start QGIS and load the raster &lt;code&gt;Nitrogen_Leaching_20150903.tif&lt;/code&gt;. The project is saved as &lt;code&gt;~/Maps/nitrogen.qgs&lt;/code&gt;, and both the raster and a copy of &lt;code&gt;/usr/lib/cgi-bin/qgis-mapserve.fcgi&lt;/code&gt; is placed in the same directory.&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;./img/qgis/qgis.nitrogen.01.png&#34; alt=&#34;nitrogen.qgs&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;&lt;code&gt;nitrogen.qgs&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Some basic styling is applied. Specifically, the colouring is changed from greyscale to psuedo-colour (yellow to red).&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;./img/qgis/qgis.nitrogen.02.png&#34; alt=&#34;Style&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;Style&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Making the map available as a web service is similar to before, except we check features under the ‘WCS’ heading rather than ‘WFS’.&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;./img/qgis/qgis.nitrogen.03.png&#34; alt=&#34;OWS server&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;OWS server&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;As before, we copy the project to the web server root directory, and alter permissions to make it readable (and executable):&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;sudo cp -R ~/Maps/nitrogen /usr/lib/cgi-bin/
sudo chmod -R go+rx /usr/lib/cgi-bin/nitrogen&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Again, if the service is functioning correctly, there should be at the following URL:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;http://localhost/cgi-bin/nitrogen/qgis_mapserv.fcgi?service=wms&amp;amp;request=getcapabilities&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;And, again, it should bepossible to get images directly from the service given the right set of parameters. For example:&lt;/p&gt;
&lt;pre class=&#34;asis&#34;&gt;&lt;code&gt;https://localhost/cgi-bin/nitrogen/qgis_mapserv.fcgi?&amp;amp;SERVICE=WMS&amp;amp;REQUEST=GetMap&amp;amp;VERSION=1.1.1&amp;amp;LAYERS=nitrogen&amp;amp;STYLES=&amp;amp;FORMAT=image%2Fpng&amp;amp;HEIGHT=256&amp;amp;WIDTH=256&amp;amp;SRS=EPSG%3A2193&amp;amp;BBOX=1089971.21440,4747987.36420,2470042.12700,6194308.49260&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;yields the following thumbnail:&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;./img/qgis/qgis_mapserv.02.png&#34; alt=&#34;GetMap&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;&lt;code&gt;GetMap&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;As a further example, we use R to create a leaflet map containing each layer:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(leaflet)

uri &amp;lt;- &amp;quot;https://localhost/cgi-bin/nitrogen/qgis_mapserv.fcgi?&amp;quot;

leaflet() %&amp;gt;%
  addTiles() %&amp;gt;%
  fitBounds(167, -48, 179, -34) %&amp;gt;%
  addWMSTiles(baseUrl=uri, 
              layers=&amp;quot;nitrogen&amp;quot;,
              options = WMSTileOptions(format = &amp;quot;image/png&amp;quot;, transparent = TRUE),
              group = &amp;quot;nitrogen&amp;quot;)%&amp;gt;%
  addLayersControl(overlayGroups = c(&amp;quot;nitrogen&amp;quot;),
                   options = layersControlOptions(collapsed = FALSE))&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;./img/qgis/leaflet.02.png&#34; alt=&#34;leaflet&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;leaflet&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;make-a-tilecache-and-publish-via-a-webserver&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Make a Tilecache and Publish via a Webserver&lt;/h1&gt;
&lt;p&gt;Plugins are easy to install in QGIS–simply click the ‘Plugins’ menu item, and then select ‘Managa and Install Plugins…’. Search for QMetaTiles, and click install. Once installed, we simply open the previous &lt;code&gt;nitrogen.qgs&lt;/code&gt; project, and run the QMetaTiles plugin. We simply chose a target directory, and the zoom levels required, and then run the plugin.&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;./img/qgis/qmetatiles.01.png&#34; alt=&#34;QMetaTiles&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;QMetaTiles&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Of course, the problem with a tile cache is size. A tileset covering just New Zealand down to a low zoom can easily total several gigabytes in size. On the other hand, a tile server which creates images on-the-fly only requires the raw inputs be saved–in this case totalling only 40 or so megabytes.&lt;/p&gt;
&lt;p&gt;Regardless, we can copy the tiles somewhere on the webserver path, and then treat them as a tile service. In this case, I moved the tiles to &lt;code&gt;/var/www/html/tilecache/nitrogen&lt;/code&gt; as follows:&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;sudo mkdir -p /var/www/html/tilecache
sudo mv ~/Maps/tilecache/nitrogen /var/www/html/tilecache/
sudo chmod -R go+rx /var/www/html/tilecache&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The ‘service’ should then be reachable at:&lt;/p&gt;
&lt;pre class=&#34;asis&#34;&gt;&lt;code&gt;http://localhost/tilecache/nitrogen/{z}/{x}/{y}.png&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For example, we can make a leaflet chart in R as follows:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(leaflet)

leaflet() %&amp;gt;%
  fitBounds(167, -48, 179, -34) %&amp;gt;%
  addTiles() %&amp;gt;%
  addTiles(urlTemplate=&amp;quot;https://localhost/tilecache/nitrogen/{z}/{x}/{y}.png&amp;quot;,
           group = &amp;quot;nitrogen&amp;quot;) %&amp;gt;%
  addLayersControl(overlayGroups = c(&amp;quot;nitrogen&amp;quot;),
                   options = layersControlOptions(collapsed = FALSE))&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;./img/qgis/leaflet.03.png&#34; alt=&#34;leaflet&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;leaflet&lt;/p&gt;
&lt;/div&gt;
&lt;!--
# Show Features in a Web Client

First, download the client:

```bash
cd Downloads
git clone https://github.com/qgis/qgis-web-client.git
```

The resulting directory was 172MB when I did it, so this could take a minute or
tow.  Then, install somewhere your webserver can see:

```bash
cd qgis-web-client
sudo mkdir -p /var/www/html/qgis-web-client/projects
sudo ./install.sh /var/www/html/qgis-web-client/projects
```
--&gt;
&lt;/div&gt;


&lt;!-- BLOGDOWN-HEAD




/BLOGDOWN-HEAD --&gt;
</description>
    </item>
    
    <item>
      <title>About this blog</title>
      <link>/about/</link>
      <pubDate>Mon, 28 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>/about/</guid>
      <description>&lt;p&gt;I work for a National Statistics Office as a methodologist, which invariably
involves a fair bit of computer programming and the like.  It&amp;rsquo;s interesting
work, and so I find myself tinkering with similar things in my free time.
&lt;!--
However, my work environment is pretty tightly controlled, with access to a
relatively small set of mostly proprietary products.  But away from work I have
complete freedom, and (by choice) access only to open source products.
--&gt;&lt;/p&gt;

&lt;p&gt;This blog mostly contains posts describing things I&amp;rsquo;ve tried that I find
interesting.  But this also means that more often than not I am describing tools
that could serve free, and perhaps easier to use or more productive
alternatives to the proprietary tools I use professionally.  The posts
themselves are mostly just a convenient way of sharing what I&amp;rsquo;ve tried with
colleagues, but maybe others will find something here useful&amp;hellip;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Serving Geospatial Features with Mapnik and TileStache</title>
      <link>/post/tiles/</link>
      <pubDate>Mon, 28 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>/post/tiles/</guid>
      <description>&lt;!-- BLOGDOWN-BODY-BEFORE

/BLOGDOWN-BODY-BEFORE --&gt;

&lt;p&gt;&lt;link rel=&#34;stylesheet&#34; type=&#34;text/css&#34; href=&#34;./css/custom.css&#34;&gt;&lt;/p&gt;
&lt;div id=&#34;overview&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Overview&lt;/h1&gt;
&lt;p&gt;When making maps for display on the web, the size of the various objects being rendered can quickly become overwhelming. For example, a polygon feature class containing &lt;a href=&#34;http://www.stats.govt.nz/methods/classifications-and-standards/classification-related-stats-standards/meshblock/definition.aspx#&#34;&gt;New Zealand Meshblocks&lt;/a&gt;, a set of roughly 40,000 mutually exclusive and exhaustive polygons, is more than 100MB when stored as a shapefile, but much larger uncompressed and rendered in a browser window.&lt;/p&gt;
&lt;p&gt;There are various approaches one can take to attempt to deal with this issue, though useful solutions tend to depend on server-side processing. Essentially, one fetches and renders only as much data as is needed to populate the current viewport. One way of doing this is to use a tile server whereby a map is represented as a grid made of individual &lt;em&gt;tiles&lt;/em&gt;, and each tile is an image which can be rendered and served on request. For example:&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;./img/tiles/020302.png&#34; alt=&#34;http://tile.openstreetmap.org/2/3/2.png&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;&lt;a href=&#34;http://tile.openstreetmap.org/2/3/2.png&#34; class=&#34;uri&#34;&gt;http://tile.openstreetmap.org/2/3/2.png&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;In this document we consider two main tools: &lt;a href=&#34;http://mapnik.org&#34;&gt;Mapnik&lt;/a&gt;, which is used to render the individual tiles; and &lt;a href=&#34;http://tilestache.org&#34;&gt;TileStache&lt;/a&gt;, which is used to serve the tiles.&lt;/p&gt;
&lt;p&gt;Mapnik can render tiles dynamically, thus avoiding the need to cache all the required tiles in advance. Maps themselves are styled via an XML file which provides a good deal of control over map layout, and can be modified on demand.&lt;/p&gt;
&lt;p&gt;Best of all, every tool used in this document is completely free. So, in principle, a production quality server could be created, with the only costs incurred being the cost of the host server itself. At current rates, a Linux instance with 2 cores and 8GB of RAM could be created on AWS with an annual cost of as little as $900.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;setting-things-up&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Setting Things Up&lt;/h1&gt;
&lt;p&gt;The host in question here is a VirtualBox VM running 64-bit Debian Linux (Stretch), with 2 cores and 8GB of RAM assigned. The instructions will likely apply well enough to other Debian-based Linux distrubtions, such as Ubuntu. Users of other Linux distributions will probably be able to use the instructions here as a template.&lt;/p&gt;
&lt;p&gt;It is possible to get things working on a Windows platform, albeit with slightly less functionality. However, my personal opinion is that it is much easier and more reliable on a Linux platform, and Linux is strongly recommended. Windows users can easily get up and running with Linux by creating a virtual machine, provided they have some RAM to spare. &lt;a href=&#34;https://www.virtualbox.org/&#34;&gt;Oracle VM VirtualBox&lt;/a&gt; is a perfectly good option, and is also freely available.&lt;/p&gt;
&lt;div id=&#34;mapnik-tilestache&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Mapnik &amp;amp; TileStache&lt;/h2&gt;
&lt;p&gt;Both Mapnik and TileStache are in the standard repositories, so installing is as simple as:&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;sudo apt-get install libmapnik libmapnik-dev mapnik-utils python-mapnik tilestache&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;TileStache also required the Python imaging library. To install this:&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;sudo pip install -U Pillow&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;testing-the-installation&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Testing the installation&lt;/h3&gt;
&lt;p&gt;For development purposes TileStache can be started via the &lt;code&gt;tilestache-server&lt;/code&gt; command, which causes TileStache to run on port 8080 by default.&lt;/p&gt;
&lt;p&gt;When starting, &lt;code&gt;tilestache-server&lt;/code&gt; looks for a file called &lt;code&gt;tilestache.cfg&lt;/code&gt;, so we create one as follows:&lt;/p&gt;
&lt;pre class=&#34;json&#34;&gt;&lt;code&gt;{
  &amp;quot;layers&amp;quot;: 
  {
    &amp;quot;osm&amp;quot;:
    {
      &amp;quot;provider&amp;quot;: {&amp;quot;name&amp;quot;: &amp;quot;proxy&amp;quot;, &amp;quot;url&amp;quot;: &amp;quot;http://tile.openstreetmap.org/{Z}/{X}/{Y}.png&amp;quot;}
    }
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To start TileStache, run:&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;tilestache-server -c &amp;lt;path to config&amp;gt;/tilestache.cfg&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;which will then make the server available at &lt;a href=&#34;http://localhost:8080&#34; class=&#34;uri&#34;&gt;http://localhost:8080&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;./img/tiles/tiles.png&#34; alt=&#34;http://localhost:8080&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;&lt;a href=&#34;http://localhost:8080&#34; class=&#34;uri&#34;&gt;http://localhost:8080&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;In this case, tiles from openstreetmap.org are available at &lt;code&gt;/osm/{z}/{x}/{y}.png&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;./img/tiles/000.crop.png&#34; alt=&#34;http://localhost:8080/osm/0/0/0.png&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;&lt;a href=&#34;http://localhost:8080/osm/0/0/0.png&#34; class=&#34;uri&#34;&gt;http://localhost:8080/osm/0/0/0.png&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;uwsgi-nginx-setup-optional&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;uWSGI + Nginx Setup (optional)&lt;/h2&gt;
&lt;p&gt;The testing section above describes how one can run TileStache and Mapnik together using the &lt;code&gt;tilestache-server&lt;/code&gt; command, and is fine for development purposes. However, for a more performant, robust solution, we instead use WSGI.&lt;/p&gt;
&lt;p&gt;There are a few options we could employ here, but we will use &lt;a href=&#34;https://uwsgi-docs.readthedocs.io/en/latest/&#34;&gt;uWSGI&lt;/a&gt; to run TileStache, and &lt;a href=&#34;https://www.nginx.com/&#34;&gt;NGINX&lt;/a&gt; to reverse proxy.&lt;/p&gt;
&lt;div id=&#34;uwsgi&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;uWSGI&lt;/h3&gt;
&lt;p&gt;One of the easier ways to install uWSGI is to use pip:&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;sudo apt-get install python-pip
sudo pip install -U uwsgi&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, create a file called &lt;code&gt;/etc/tilestache/tilestache-uwsgi.ini&lt;/code&gt; as follows (note we have decided to use port 9090 rather than the default of 8080):&lt;/p&gt;
&lt;pre class=&#34;asis&#34;&gt;&lt;code&gt;[uwsgi]
http-socket = :9090
eval = import TileStache; application = TileStache.WSGITileServer(&amp;quot;/etc/tilestache/tilestache.cfg&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Given this file, TileStache can then be started so that it is available at &lt;code&gt;http://localhost:9090&lt;/code&gt; via:&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;uwsgi --ini /etc/tilestache/tilestache-uwsgi.ini&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;starting-uwsgi-automatically-on-boot&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Starting uWSGI automatically on boot&lt;/h3&gt;
&lt;p&gt;We might also want to set things up so that the service starts automatically when the system is booted. Debian uses System V-style init. I’m not all that experienced with this, but I got things working by creating &lt;code&gt;/etc/init.d/tilestache&lt;/code&gt; as follows:&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;#!/bin/sh

### BEGIN INIT INFO
# Provides:          tilestache
# Required-Start:    
# Required-Stop:     
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Start TileStache.
# Description:       Start TileStache.
### END INIT INFO

DAEMON=/usr/local/bin/uwsgi
NAME=&amp;quot;tilestache&amp;quot;

RUN_DIR=/var/run
PIDFILE=$RUN_DIR/tilestache.pid

case &amp;quot;$1&amp;quot; in
    start)
      printf &amp;quot;%-50s&amp;quot; &amp;quot;Starting $NAME...&amp;quot;
      PID=`$DAEMON --ini /etc/tilestache/tilestache-uwsgi.ini &amp;gt; /dev/null 2&amp;gt;&amp;amp;1 &amp;amp; echo $!`
      if [ -z $PID]; then
        printf &amp;quot;%s\n&amp;quot; &amp;quot;Fail&amp;quot;
      else
        echo $PID &amp;gt; $PIDFILE
        printf &amp;quot;%s\n&amp;quot; &amp;quot;done.&amp;quot;
      fi
    ;;

    stop)
      printf &amp;quot;%-50s&amp;quot; &amp;quot;Stopping $NAME...&amp;quot;
      PID=`cat $PIDFILE`
      if [ -f $PIDFILE ]; then 
        kill -HUP $PID
        printf &amp;quot;%s\n&amp;quot; &amp;quot;done.&amp;quot;
        rm -f $PIDFILE
      else
        printf &amp;quot;%s\n&amp;quot; &amp;quot;no such process.&amp;quot;
      fi
      echo &amp;quot;done.&amp;quot;
    ;;

    restart)
      $0 stop
      $0 start
    ;;

    *)
    echo &amp;quot;Usage: $0 {start|stop|restart}&amp;quot;
    exit 1
    ;;
esac

exit 0&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and running:&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;sudo update-rc.d tilestache defaults&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For those unfamiliar with Linux, this also means the service can be stopped and restarted at will with commands like:&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;sudo service tilestache start
sudo service tilestache stop
sudo servcee tilestache restart&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ubuntu, and possily other Linux distributions, now uses upstart rather than System V-like init. It’s a simpler process to set up, so the details are left to the reader if this applies (typically, create &lt;code&gt;/etc/init/tilestache.conf&lt;/code&gt; rather than &lt;code&gt;/etc/init.d/tilestache&lt;/code&gt;, where &lt;code&gt;tilestache.conf&lt;/code&gt; makes use of much simpler syntax–see &lt;a href=&#34;http://upstart.ubuntu.com/&#34;&gt;upstart&lt;/a&gt; for details).&lt;/p&gt;
&lt;p&gt;Note that uWSGI has something called &lt;a href=&#34;http://uwsgi-docs.readthedocs.io/en/latest/Emperor.html&#34;&gt;uWSGI Emperor&lt;/a&gt;. This makes it possible to control multiple services from a single uWSGI instance– just create &lt;code&gt;ini&lt;/code&gt; files like &lt;code&gt;tilestache-uwsgi.ini&lt;/code&gt; above. This certainly has some appeal.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;nginx&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;NGINX&lt;/h3&gt;
&lt;p&gt;If you don’t have NGINX, it can be installed as follows:&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;sudo apt-get install nginx&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To give the service a nice endpoint, and potentially make it available externally, we add the following to &lt;code&gt;/etc/nginx/sites-available/default&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;asis&#34;&gt;&lt;code&gt;server{

  ...
  
  location /tiles/ {
    include uwsgi_params;
    uwsgi_pass 127.0.0.1:9090;
  }
  
  ...

}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Apparently NGINX and uWSGI work together. I couldn’t quite figure this out, but it is, apparently, possible to do something like:&lt;/p&gt;
&lt;pre class=&#34;asis&#34;&gt;&lt;code&gt;server{

  ...
  
  location /tiles/ {
    include uwsgi_params;
    uwsgi_pass 127.0.0.1:9090;
  }
  
  ...

}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To test the config and restart NGINX, issue:&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;sudo service nginx configtest &amp;amp;&amp;amp; sudo service nginx reload&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;At this point, the service would now be availabe on a standard port at &lt;code&gt;http://localhost/tiles/&lt;/code&gt; or &lt;code&gt;http://&amp;lt;domain name&amp;gt;/tiles/&lt;/code&gt; if the server is available externally.&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;./img/tiles/000nginxlocal.png&#34; alt=&#34;http://localhost/tiles/&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;&lt;a href=&#34;http://localhost/tiles/&#34; class=&#34;uri&#34;&gt;http://localhost/tiles/&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;tilemill&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;‘TileMill’&lt;/h2&gt;
&lt;p&gt;Setting up a Mapnik source for use with TileStache requires a Mapnik XML file, and these can be tricky to produce by hand; and iterative refinement is also cumbersome. So, it is also useful to install &lt;a href=&#34;https://tilemill-project.github.io/tilemill/&#34;&gt;TileMill&lt;/a&gt; which provides a nice editor which can be used to create maps, and export the settings as a Mapnik XML file.&lt;/p&gt;
&lt;div id=&#34;installation&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Installation&lt;/h3&gt;
&lt;p&gt;TileMill was originally produced by &lt;a href=&#34;http://www.mapbox.com&#34;&gt;Mapbox&lt;/a&gt;, though it seems they no longer actively develop it (instead, they encourage the purchase of &lt;a href=&#34;https://www.mapbox.com/mapbox-studio/&#34;&gt;Mapbox Studio&lt;/a&gt;, which is excellent, but not free–enterprises and professionals might want to consider it). That said, the project has been forked, and active development is continuing. We choose a fork called &lt;a href=&#34;https://github.com/florianf/tileoven&#34;&gt;TileOven&lt;/a&gt;. To install it:&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;cd ~/Downloads
git clone https://github.com/florianf/tileoven.git
cd tileoven
npm install
cd
sudo mv ~/Downloads/tileoven /usr/local/&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Of course, this means one must also have both git and node.js. To install git:&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;sudo apt-get install git&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To install a newer version of node than is in the repositories, run:&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;cd ~/Downloads
wget https://nodejs.org/dist/v6.9.1/node-v6.9.1-linux-x64.tar.xz
tar -xvf node-v6.9.1-linux-x64.tar.xz
sudo mv node-v6.9.1-linux-x64 /usr/local/node
echo &amp;quot;export PATH=$PATH:/usr/local/node/bin&amp;quot; &amp;gt;&amp;gt; ~/.bashrc
source ~/.bashrc&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;testing-the-installation-1&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Testing the installation&lt;/h3&gt;
&lt;p&gt;To run TileOven, issue:&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;/usr/local/tileoven/index.js&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then browse to &lt;code&gt;http://localhost:9090&lt;/code&gt; in a web browser and you’ll see something like:&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;./img/tiles/tileoven.png&#34; alt=&#34;TileMill (local)&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;TileMill (local)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;accessing-tilemill-remotely&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Accessing TileMill remotely&lt;/h3&gt;
&lt;p&gt;TileMill is currently built to work strictly locally. This makes it somewhat awkward to put it on a server and access it from a remote client. There are ways, though none is neccesarily ideal.&lt;/p&gt;
&lt;p&gt;In one method, the variable &lt;code&gt;listenHost&lt;/code&gt; can be set to match the server’s public IP address in the file &lt;code&gt;/usr/local/tileoven/lib/config.defaults.json&lt;/code&gt;. This is far from secure.&lt;/p&gt;
&lt;p&gt;Alternatively, we could rely on SSH tunneling. The TileMill UI runs on port 20009, and the tile server runs on port 20008; so we just need to forward these two ports to get access. On a system with a proper SSH client such as Linux, we can do something like:&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;ssh hostname -l username -L 20009:localhost:20009 20008:localhost:20008&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then we would simply point our browser at &lt;code&gt;http://localhost:20009&lt;/code&gt; to get access. From a security perspective, this isn’t necessarily an ideal option either, however. On my machine, I created a user called &lt;code&gt;gisuser&lt;/code&gt; and added them to a group called &lt;code&gt;gis&lt;/code&gt;. I then made sure this user had limited access, and used this account to start the TileMill server.&lt;/p&gt;
&lt;p&gt;Things are a bit trickier on a Windows platform since it doesn’t ship with an SSH client. Either way, we will describe how this can work using &lt;a href=&#34;http://www.chiark.greenend.org.uk/~sgtatham/putty/&#34;&gt;PuTTY&lt;/a&gt;. I installed using the installer found &lt;a href=&#34;here&#34;&gt;https://the.earth.li/~sgtatham/putty/latest/x86/putty-0.67-installer.msi&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Now, let’s assume we have a server running TileMill which can be accessed on a network by the name &lt;code&gt;debian&lt;/code&gt;, or by the IP address &lt;code&gt;192.168.20.22&lt;/code&gt; (which is true for my local network). We start PuTTY and enter either the hostname or IP address as follows:&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;./img/tiles/putty01.png&#34; alt=&#34;hostname&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;hostname&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Then, navigate to Connection→SSH→Auth→Tunnels, and enter ports 20008 and 20009 as required:&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;./img/tiles/putty02.png&#34; alt=&#34;tunnels&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;tunnels&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Click the connect button, and you will be asked to enter a username and, and a terminal will open as follows:&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;./img/tiles/putty03.png&#34; alt=&#34;terminal&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;terminal&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The terminal isn’t terribly important in this instance since we just want to acces TileMill. Simply open a browser and point it at &lt;code&gt;http://localhost:20009&lt;/code&gt; as follows:&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;./img/tiles/putty04.png&#34; alt=&#34;TileMill (remote)&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;TileMill (remote)&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;This was done using a remote machine on the same local network as the TileMill server, but the same process applies over the web–just use the public IP or fully qualified name of the server. For further detail, see:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://tilemill-project.github.io/tilemill/docs/guides/ubuntu-service/#accessing-tilemill-from-remote-install&#34;&gt;Accessing TileMill from remote install&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;postgresql-postgis&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;PostgreSQL / PostGIS&lt;/h2&gt;
&lt;p&gt;While we can render tiles directly from shapefiles and rasters, it is probably better to pull spatial data from a spatially enabled database. &lt;a href=&#34;https://www.postgresql.org/&#34;&gt;PostgreSQL&lt;/a&gt; is a high quality, enterprise ready relational database management system which is freely available; and &lt;a href=&#34;http://www.postgis.net/&#34;&gt;PostGIS&lt;/a&gt; is an extender which adds spatial capabilities. We will describe how to install these products, as well as populate tables from shapefiles and rasters.&lt;/p&gt;
&lt;div id=&#34;install-postgresql-and-postgis&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Install PostgreSQL and PostGIS&lt;/h3&gt;
&lt;p&gt;To install PostgreSQL and PostGIS, simply run:&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;sudo apt-get install postgresql postgis odbc-postgresql&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The last package, &lt;code&gt;odbc-postgresql&lt;/code&gt;, is not strictly necessary, but it will often be useful to access Postgres via ODBC, and this package provides the necessary driver. If you would also like a JDBC driver, you can do:&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;sudo apt-get install libpostgresql-jdbc-java&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;create-a-spatially-enabled-database&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Create a spatially-enabled database&lt;/h3&gt;
&lt;p&gt;We create a single database called &lt;code&gt;gis&lt;/code&gt;, and we grant read access to a user called &lt;code&gt;gisuser&lt;/code&gt; with the creative password &lt;code&gt;password&lt;/code&gt;. It makes sense to group spatial data into collections by creating schemas as appropriate. In this case, we create a schema called &lt;code&gt;geography&lt;/code&gt; in which we place standard geographies (meshblock, Area Unit, Territorial Authority, and Regional Council) as multipolygons. Similarly, we cteate a schema called &lt;code&gt;raster&lt;/code&gt; in which we will place all raster data.&lt;/p&gt;
&lt;p&gt;To gain access to an interactive SQL shell as root:&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;sudo -u postgres psql&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And to create the database, run the following:&lt;/p&gt;
&lt;pre class=&#34;sql&#34;&gt;&lt;code&gt;CREATE DATABASE gis;
\c gis
CREATE EXTENSION postgis;
CREATE EXTENSION postgis_topology;
CREATE SCHEMA geography;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can confirm the spatial extensions are present as follows:&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;sudo -u postgres psql -U postgres -d gis -c &amp;quot;SELECT postgis_version()&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;which should return something like:&lt;/p&gt;
&lt;pre class=&#34;asis&#34;&gt;&lt;code&gt;            postgis_version            
---------------------------------------
 2.1 USE_GEOS=1 USE_PROJ=1 USE_STATS=1
(1 row)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, we give access to the data to user &lt;code&gt;gisuser&lt;/code&gt; as follows:&lt;/p&gt;
&lt;pre class=&#34;sql&#34;&gt;&lt;code&gt;CREATE USER gisuser WITH ENCRYPTED PASSWORD &amp;#39;password&amp;#39;;
GRANT CONNECT ON DATABASE gis TO gisuser;
GRANT USAGE ON SCHEMA geography TO gisuser;
GRANT USAGE ON SCHEMA raster TO gisuser;
GRANT SELECT ON ALL TABLES IN SCHEMA geography TO gisuser;
GRANT SELECT ON ALL TABLES IN SCHEMA raster TO gisuser;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that PostGIS supports rasters, but as far as I can tell, TileMill and Mapnik cannot read PostGIS rasters. So, we won’t bother loading any rasters to PostGIS here, and will instead just reference the GeoTIFF files directly.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;populate-the-database&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Populate the database&lt;/h3&gt;
&lt;p&gt;It is then relatively easy to load data into the database. To load the shapefile &lt;code&gt;&amp;lt;path&amp;gt;/MB2013.*&lt;/code&gt; into the database, for example:&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;shp2pgsql -I -s 2193 &amp;lt;path&amp;gt;/REGC2013.shp geography.REGC2013 | \
   sudo -u postgres psql -U postgres -d gis&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And that’s it! Again, we can conduct some simple checks. For example, the average area of a meshblock can be calculated by appealing to the &lt;code&gt;ST_Area&lt;/code&gt; function as follows:&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;psql -U gisuser -d gis \ 
   -c &amp;quot;SELECT sum(ST_Area(geom)) / sum(1) as ave_area FROM geography.MB2013&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;which, after being prompted for a password, returns:&lt;/p&gt;
&lt;pre class=&#34;asis&#34;&gt;&lt;code&gt;     ave_area     
------------------
 5829825.22609488
(1 row)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;serving-tiles&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Serving Tiles&lt;/h1&gt;
&lt;p&gt;The basic process we will use for deploying tiles will be to first create and style a map in TileMill, then export to Mapnik XML. The Mapnik XML file is referenced from a TileStache configuration, making it available as a tile server.&lt;/p&gt;
&lt;p&gt;We will demonstrate how to add polygon features from both shapefiles and from PostGIS, and rasters from GeoTIFFs. For the purpose of this document, we have sourced features and saved them to &lt;code&gt;/usr/local/tileoven/data&lt;/code&gt; as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;MB2013/MB2013.shp&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;AU2013/AU2013.shp&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;TA2013/TA2013.shp&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;REGC2013/REGC2013.shp&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;river/river-environment-classification-catchment-order-6-2010.shp&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nitrogen/Nitrogen_Leaching_20150903.tif&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In additions, each of the shapefiles is also stored in a PostGIS database called &lt;code&gt;gis&lt;/code&gt;, schema &lt;code&gt;geography&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For convenience all these files have been placed in the following GitHub repostiory:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/cmhh/spatialdata&#34;&gt;spatialdata&lt;/a&gt;&lt;/p&gt;
&lt;div id=&#34;shapefiles&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Shapefiles&lt;/h2&gt;
&lt;p&gt;Let’s start with the river shapefile. In the TileMill UI, select ‘Projects’ from the sidebar, and then click the ‘+ New project’. Fill in the resulting dialog as follows:&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;./img/tiles/river01.png&#34; alt=&#34;river - create project&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;river - create project&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The default map canvas will contain a modestly styled countries feature class which you can safely delete–click the layers control (&lt;img src=&#34;./img/tiles/layers.png&#34; /&gt;), hover over &lt;code&gt;#countries&lt;/code&gt;, and click delete (&lt;img src=&#34;./img/tiles/delete.png&#34; /&gt;).&lt;/p&gt;
&lt;p&gt;Next, click the ‘+ Add layer’ button, and fill in the resulting dialog as in the following screenshot, before clicking the ‘Save &amp;amp; Style’ button:&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;./img/tiles/river02.png&#34; alt=&#34;river - add layer&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;river - add layer&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Now edit the &lt;code&gt;style.mss&lt;/code&gt; tab so it contains:&lt;/p&gt;
&lt;pre class=&#34;asis&#34;&gt;&lt;code&gt;Map {
  background-color: transparent;
}

#river {
  line-color:#594;
  line-width:0.5;
  polygon-opacity:1;
  [Tot_reach &amp;gt;=     0]{ polygon-fill:#EFF3FF; }
  [Tot_reach &amp;gt;=  3000]{ polygon-fill:#BDD7E7; }
  [Tot_reach &amp;gt;=  6000]{ polygon-fill:#6BAED6; }
  [Tot_reach &amp;gt;=  9000]{ polygon-fill:#3182BD; }
  [Tot_reach &amp;gt;= 12000]{ polygon-fill:#08519C; }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Upon clicking the save button, the map should update and (after a little panning and zooming) looks as follows:&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;./img/tiles/river03.png&#34; alt=&#34;river - final map&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;river - final map&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;To serve a map like this via TileStache, save &lt;code&gt;style.mss&lt;/code&gt; as a Mapnik XML file by clicking the Export button and selecting ‘Mapnik XML’. Save the file as &lt;code&gt;/etc/tilestache/river.xml&lt;/code&gt;. Then, edit &lt;code&gt;/etc/tilestache/tilestache.cfg&lt;/code&gt; to include a &lt;code&gt;river&lt;/code&gt; layer as follows:&lt;/p&gt;
&lt;pre class=&#34;asis&#34;&gt;&lt;code&gt;{
  &amp;quot;cache&amp;quot;:
  {
    &amp;quot;name&amp;quot;: &amp;quot;Disk&amp;quot;,
    &amp;quot;path&amp;quot;: &amp;quot;file:///tmp/cache&amp;quot;,
    &amp;quot;umask&amp;quot;: &amp;quot;0000&amp;quot;,
    &amp;quot;dirs&amp;quot;: &amp;quot;portable&amp;quot;
  },
  &amp;quot;layers&amp;quot;:
  {
    &amp;quot;river&amp;quot;:
    {
      &amp;quot;provider&amp;quot;: {&amp;quot;name&amp;quot;: &amp;quot;mapnik&amp;quot;, &amp;quot;mapfile&amp;quot;: &amp;quot;river.xml&amp;quot;}
    },
    
    ...
    
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This newly created layer should now be accessible via &lt;code&gt;&amp;lt;base&amp;gt;/river/{z}/{x}/{y}.png&lt;/code&gt;. As described above, I set TileStache to be accessible via &lt;code&gt;http://localhost/tiles&lt;/code&gt;. The leaflet package in R provieds us with a convenient way of testing things are working:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(leaflet)

leaflet(width=&amp;quot;100%&amp;quot;, height=500) %&amp;gt;% addTiles() %&amp;gt;% 
  fitBounds(166.70047, -34.45676, 178.52966, -47.06345) %&amp;gt;%
  addTiles(urlTemplate = &amp;quot;http://localhost/tiles/river/{z}/{x}/{y}.png&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;./img/tiles/river04.png&#34; /&gt;

&lt;/div&gt;
&lt;p&gt;(Of course, you get a live preview of the tiles in TileMill, but we want to confirm that we can server these via TileStache. That is, we want to confirm that we can access the tile server remotely with a ‘Google Maps-style URL’.)&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;postgis&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;PostGIS&lt;/h2&gt;
&lt;p&gt;Now that we’re familiar with the general layout, we’ll be a little lighter on detail. This time, create a project called &lt;code&gt;composite&lt;/code&gt; and, as before, delete the default &lt;code&gt;countries&lt;/code&gt; layer.&lt;/p&gt;
&lt;p&gt;We will add each of MB2013, AU2013, TA2013, and REGC2013 from PostGIS tables, though it would be just as easy to add them via shapefiles. They are all entered the same way, so we show the setup for just the one, MB2013, as follows:&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;./img/tiles/composite01.png&#34; /&gt;

&lt;/div&gt;
&lt;p&gt;After all 4 layers are added, edit &lt;code&gt;style.mss&lt;/code&gt; so it contains the following:&lt;/p&gt;
&lt;pre class=&#34;asis&#34;&gt;&lt;code&gt;Map {
  background-color: transparent;
  maximum-extent: &amp;quot;-19691655, -5989537, 19879128, -4081645&amp;quot;;
}

#MB2013 {
  ::shape{
    [zoom &amp;gt;= 15]{
      line-color:#000000;
      line-width:0.5;
      line-opacity: 1;
      polygon-opacity: 0;
      polygon-fill: transparent;
    }
  }
  ::label{
    [zoom &amp;gt;= 15]{
      text-name: [code];
      text-face-name: &amp;#39;Arial Black Regular&amp;#39;;
      text-fill: #036;
      text-size: 9;
      text-halo-fill: fadeout(white, 30%);
      text-halo-radius: 2.5;
      text-avoid-edges: false;
      text-allow-overlap: true;
      text-placement: interior;
    }
  }
}

#AU2013 {
  ::shape{
    [zoom &amp;gt;= 12][zoom &amp;lt; 15]{
      line-color:#000000;
      line-width:0.5;
      line-opacity: 1;
      polygon-opacity: 0;
      polygon-fill: transparent;
    }
  }
  ::label{
    [zoom &amp;gt;= 12][zoom &amp;lt; 15]{
      text-name: [label] + &amp;quot;\n(&amp;quot; + [code] + &amp;quot;)&amp;quot;;
      text-face-name: &amp;#39;Arial Black Regular&amp;#39;;
      text-fill: #036;
      text-size: 9;
      text-halo-fill: fadeout(white, 30%);
      text-halo-radius: 2.5;
      text-avoid-edges: false;
      text-allow-overlap: true;
      text-placement: interior;
    }
  }
}

#TA2013 {
  ::shape{
    [zoom &amp;gt; 9][zoom &amp;lt; 12]{
      line-color:#000000;
      line-width:0.5;
      line-opacity: 1;
      polygon-opacity: 0;
      polygon-fill: transparent;
    }
  }
  ::label{
    [zoom &amp;gt; 9][zoom &amp;lt; 12]{
      text-name: [label] + &amp;quot;\n(&amp;quot; + [code] + &amp;quot;)&amp;quot;;
      text-face-name: &amp;#39;Arial Black Regular&amp;#39;;
      text-fill: #036;
      text-size: 9;
      text-halo-fill: fadeout(white, 30%);
      text-halo-radius: 2.5;
      text-avoid-edges: false;
      text-allow-overlap: true;
      text-placement: interior;
    }
  }
}

#REGC2013 {
  ::shape{
    [zoom &amp;gt;= 0][zoom &amp;lt;= 9]{
      line-color:#000000;
      line-width:0.5;
      line-opacity: 1;
      polygon-opacity: 0;
      polygon-fill: transparent;
    }
  }
  ::label{
    [zoom &amp;gt;= 0][zoom &amp;lt;= 9]{
      text-name: [label];
      text-face-name: &amp;#39;Arial Black Regular&amp;#39;;
      text-fill: #036;
      text-size: 9;
      text-halo-fill: fadeout(white, 30%);
      text-halo-radius: 2.5;
      text-avoid-edges: false;
      text-allow-overlap: true;
      text-placement: interior;
    }
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As before, ws export to Mapnik XML and save as &lt;code&gt;/etc/tilestache/composite.xml&lt;/code&gt;, and edit &lt;code&gt;/etc/tilestache/tilestache.cfg&lt;/code&gt; to inculde the new layer:&lt;/p&gt;
&lt;pre class=&#34;asis&#34;&gt;&lt;code&gt;{
  &amp;quot;cache&amp;quot;:
  {
    &amp;quot;name&amp;quot;: &amp;quot;Disk&amp;quot;,
    &amp;quot;path&amp;quot;: &amp;quot;file:///tmp/cache&amp;quot;,
    &amp;quot;umask&amp;quot;: &amp;quot;0000&amp;quot;,
    &amp;quot;dirs&amp;quot;: &amp;quot;portable&amp;quot;
  },
  &amp;quot;layers&amp;quot;:
  {
  
    ...
    
    &amp;quot;composite&amp;quot;:
    {
      &amp;quot;provider&amp;quot;: {&amp;quot;name&amp;quot;: &amp;quot;mapnik&amp;quot;, &amp;quot;mapfile&amp;quot;: &amp;quot;composite.xml&amp;quot;}
    }
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I won’t profess to being very artistic here, but this map will show regional council areas (REGC2013) when zoomed out, and will change to display more detailed classifications as we zoom in. Again, it is easy to view the map in R:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(leaflet)

leaflet() %&amp;gt;% addTiles() %&amp;gt;%
  fitBounds(166.70047, -34.45676, 178.52966, -47.06345) %&amp;gt;%
  addTiles(urlTemplate = &amp;quot;http://localhost/tiles/composite/{z}/{x}/{y}.png&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;./img/tiles/composite02.png&#34; /&gt;

&lt;/div&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;./img/tiles/composite03.png&#34; /&gt;

&lt;/div&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;./img/tiles/composite04.png&#34; /&gt;

&lt;/div&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;./img/tiles/composite05.png&#34; /&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;rasters&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Rasters&lt;/h2&gt;
&lt;p&gt;Finally, create a new project called &lt;code&gt;nleach&lt;/code&gt;, and add the &lt;code&gt;Nitrogen_Leaching_20150903.tif&lt;/code&gt; as follows:&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;./img/tiles/nleach01.png&#34; /&gt;

&lt;/div&gt;
&lt;p&gt;Then edit &lt;code&gt;style.mss&lt;/code&gt; as follows:&lt;/p&gt;
&lt;pre class=&#34;asis&#34;&gt;&lt;code&gt;Map {
  background-color: transparent;
}

#nleach {
  raster-opacity:1;
  raster-colorizer-default-mode: linear;
  raster-colorizer-default-color: transparent;
  raster-colorizer-stops:
    stop(-0.000005, #FFFFB2)
    stop(13.402771, #FECC5C)
    stop(26.805547, #FD8D3C)
    stop(40.208324, #F03B20)
    stop(53.611100, #BD0026);
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Export to Mapnik XML and save as &lt;code&gt;/etc/tilestache/nleach.xml&lt;/code&gt;. Then add the layer to &lt;code&gt;/etch/tilestache/tilestache.cfg&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;asis&#34;&gt;&lt;code&gt;{
  &amp;quot;cache&amp;quot;:
  {
    &amp;quot;name&amp;quot;: &amp;quot;Disk&amp;quot;,
    &amp;quot;path&amp;quot;: &amp;quot;file:///tmp/cache&amp;quot;,
    &amp;quot;umask&amp;quot;: &amp;quot;0000&amp;quot;,
    &amp;quot;dirs&amp;quot;: &amp;quot;portable&amp;quot;
  },
  &amp;quot;layers&amp;quot;:
  {
  
    ...
    
    &amp;quot;composite&amp;quot;:
    {
        &amp;quot;provider&amp;quot;: {&amp;quot;name&amp;quot;: &amp;quot;mapnik&amp;quot;, &amp;quot;mapfile&amp;quot;: &amp;quot;composite.xml&amp;quot;},
        &amp;quot;projection&amp;quot;: &amp;quot;spherical mercator&amp;quot;
    }
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Again, we can visualise the result in R:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(leaflet)

leaflet() %&amp;gt;% addTiles() %&amp;gt;%
  fitBounds(166.70047, -34.45676, 178.52966, -47.06345) %&amp;gt;%
  addTiles(urlTemplate = &amp;quot;http://localhost/tiles/nleach/{z}/{x}/{y}.png&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;./img/tiles/nleach02.png&#34; /&gt;

&lt;/div&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;./img/tiles/nleach03.png&#34; /&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;!-- BLOGDOWN-HEAD




/BLOGDOWN-HEAD --&gt;
</description>
    </item>
    
    <item>
      <title>Routing in R Using the Open Source Routing Machine (OSRM)</title>
      <link>/post/routing/</link>
      <pubDate>Sun, 27 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>/post/routing/</guid>
      <description>&lt;!-- BLOGDOWN-BODY-BEFORE

/BLOGDOWN-BODY-BEFORE --&gt;

&lt;p&gt;&lt;link rel=&#34;stylesheet&#34; type=&#34;text/css&#34; href=&#34;./css/custom.css&#34;&gt;&lt;/p&gt;
&lt;div id=&#34;overview&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Overview&lt;/h1&gt;
&lt;p&gt;I often find myself needing to establish the travel time or distance between arrays of addresses. In the past I have used ArcMap’s Network Analyst tool, but have found the syntax to be clunky at best, and the performance to be very mediocre. And, besides, I am often working in R and sometimes it’s nice to be able to do everything in the one environment, rather than doing the routing in Python, say, and then using the results in R.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&#34;http://project-osrm.org/&#34;&gt;open source routing machine&lt;/a&gt; is a very fast routing engine which can be accessed via an &lt;a href=&#34;https://github.com/Project-OSRM/osrm-backend/blob/master/docs/http.md&#34;&gt;HTTP API&lt;/a&gt;, which means it can be queried relatviely easy from most languages, including R. And while public servers are available for use, it is also relatively easy to set up locally resulting in excellent throughput due to the lack of latency.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;prerequisites&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Prerequisites&lt;/h1&gt;
&lt;p&gt;The following R pacakges are required:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;rjson&lt;/code&gt; for reading web service results in JSON format&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bitops&lt;/code&gt; used to decode polylines (has convenient bitshift operators, etc.)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sp&lt;/code&gt; for spatial projections, etc.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;leaflet&lt;/code&gt; for rendering &lt;a href=&#34;http://leafletjs.com/&#34;&gt;leaflet&lt;/a&gt; maps in a browser&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;geocoding-addresses&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Geocoding addresses&lt;/h1&gt;
&lt;p&gt;The &lt;a href=&#34;https://developers.google.com/maps/documentation/geocoding/&#34;&gt;Google Geocoding API&lt;/a&gt; is used to geocode addresses. Usage is free, but the free license is limited to 2500 requests per day, at a rate no faster than 5 per second. There are free alternatives, but I’ve not found any that are satisfactorally accurate for New Zealand addresses. That said, interesting alternatives worth keeping an eye on are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.datasciencetoolkit.org/&#34;&gt;data science toolkit&lt;/a&gt; - doesn’t work at all for New Zealand&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://wiki.openstreetmap.org/wiki/Nominatim&#34;&gt;Nominatim&lt;/a&gt; - finds addresses but probably only okay if approximate locations are acceptable.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The following code results in two addresses being geocoded which we will use as an origin and a destination later when using a routing service.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(rjson)

#use google maps API to geocode a start point...
geoservice &amp;lt;- &amp;quot;http://maps.googleapis.com/maps/api/geocode&amp;quot;
(address &amp;lt;- paste0(geoservice, &amp;quot;/json?sensor=false&amp;amp;&amp;quot;,
   &amp;quot;address=10+Aragon+Grove,+Kingsley+Heights,+Upper+Hutt&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[1] &amp;quot;http://maps.googleapis.com/maps/api/geocode/json?sensor=false&amp;amp;address=10+Aragon+Grove,+Kingsley+Heights,+Upper+Hutt&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;origin &amp;lt;- fromJSON(file=address)

#...and an end point
(address &amp;lt;- paste0(geoservice, &amp;quot;/json?sensor=false&amp;amp;&amp;quot;,
   &amp;quot;address=1+Pipitea+Street,+Wellington&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[1] &amp;quot;http://maps.googleapis.com/maps/api/geocode/json?sensor=false&amp;amp;address=1+Pipitea+Street,+Wellington&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;destination &amp;lt;- fromJSON(file=address)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;fromJSON&lt;/code&gt; function turns a JSON object to an R list. If geocoding is successful (and we will just assume it was) then the origin and destination objects will contain a number of elements. We’re particularly interested in latitude, longitude, and the formatted address. E.g.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;origin$results[[1]]$geometry$location$lat&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[1] -41.12501&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;origin$results[[1]]$geometry$location$lng&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[1] 175.0845&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;origin$results[[1]]$formatted_address&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[1] &amp;quot;10 Aragon Grove, Kingsley Heights, Upper Hutt 5018, New Zealand&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;open-source-routing-machine-osrm&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Open Source Routing Machine (OSRM)&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;http://project-osrm.org/&#34;&gt;Open Source Routing Machine&lt;/a&gt; is an open source route solver. It is written in C++ and runs on Linux (maybe other platforms, but stick with Linux), and is very fast. There is a nice web demo which uses the service as a back-end &lt;a href=&#34;http://map.project-osrm.org/&#34;&gt;here&lt;/a&gt;. The back-end service is available to the public at &lt;a href=&#34;https://router.project-osrm.org&#34; class=&#34;uri&#34;&gt;https://router.project-osrm.org&lt;/a&gt;. Details, including usage policy, is available &lt;a href=&#34;https://github.com/Project-OSRM/osrm-backend/wiki/API Usage Policy&#34;&gt; here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The code below shows how to find a route between the origin and destination locations found above:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;o &amp;lt;- origin$results[[1]]$geometry$location
d &amp;lt;- destination$results[[1]]$geometry$location
(url &amp;lt;- paste0(&amp;quot;http://router.project-osrm.org/route/v1/driving/&amp;quot;, 
   o$lng,&amp;quot;,&amp;quot;,o$lat,&amp;quot;;&amp;quot;,d$lng,&amp;quot;,&amp;quot;,d$lat,&amp;quot;?overview=full&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[1] &amp;quot;http://router.project-osrm.org/route/v1/driving/175.0845498,-41.1250097;174.7811653,-41.2756572?overview=full&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;system.time({
   route &amp;lt;- fromJSON(file=url)
})&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;   user  system elapsed 
  0.000   0.000   0.784 &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Again, assuming a route was successfully found, &lt;code&gt;route&lt;/code&gt; will now contain a list including, among other things, time in seconds to traverse the route, distance in metres, and the route geomertry stored in &lt;a href=&#34;https://developers.google.com/maps/documentation/utilities/polylinealgorithm&#34;&gt;encoded polyline algorithm format&lt;/a&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;route$routes[[1]]$duration&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[1] 1738.8&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;route$routes[[1]]$distance&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[1] 34267&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;route$routes[[1]]$geometry&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[1] &amp;quot;hf_zFufsk`@M?O?QCoAKC\\GVKTKTORQTqB|BKNIRINK`@CXCV@\\@x@p@hEL`@NZPVXLXJj@DdB\\^PVLRRRZFRH`@BZC`@GZIX}@|AY^]TWJk@Jk@FeBgFUSYCi@D_Dj@MB]RKJWc@MUmAmB{C_FcB{CyA{CCBE@C?EACCCCEDw@v@g@d@{@x@_@XWJSJa@HuEf@}CZ}ALy@JYNUFBf@NdCFhCFhAP~EJ~CLnCDt@DjAHrBJtBBfAB~@@hA@bBAxACvAIbFAfA?`AD`A@t@HdEHjCNvCFhBD`BDxCBpA@X@lA@z@?hA@zAC|BOrGCxGAjD?|E?pAAdLB~DDfDN~CPvCPtBRlBZbC\\~BDPjBhI\\hAV~@L^l@hBt@lBjAhCr@vAn@jA`AdBdAbB`BfC|BlDpCdEdBnCz@nA^t@Rp@Hb@Hh@Dj@Dt@Ar@I~@IbAIlAErABjAJpANv@d@jAVh@Zj@`A`BjAfChAbDz@zCv@lCtD|NZ`ANd@\\dA~@~B`@`An@vAhAlB`AbB|A|BxDdG~CbFfCxD~BfDdBjCjBvCdAhBdApB~@jB~@~BZx@p@jBb@vA\\hAz@tC|@tCr@pBh@zAx@xBv@jBfAdCpAnCdAvBv@|Ap@rAbBzCr@xAp@|Ad@hAhAxCv@vBdA`Dj@zAd@dAr@dB|@nBhA|Bp@hA~@zAfBlC`ClDhB~Bt@fAl@|@f@`Ad@x@\\v@Tl@b@pAXdAX`Af@fBb@~Al@|Bj@lCv@jD`@hB`A~Cx@fChBhF^jAb@fAh@nAp@rAt@pA^n@~@lAhAvAhCbDtAnApFzDjDdC~BbC`B|BrCjFbD~FpEhIx@~AzAlCrAnCv@dBbAdC|B~HfD`KhBnDb@|@rCjEbE`FjCdCbDtCzCtDnDtFzBxDfD~E~B~ChExF|EnGbCpDpCpF~BrEtBrDdDhEvCfDrClDfCzDvC~FrB~DtBfDxEdGfBlBnBhB`C~BdC|B~ClDtBfCfCfE|ArCtBdEbBtCv@|ApBnE|AnDlDfIxDvIrA~C`ApBfB`DnBtDt@pAtA|Bf@z@FLFNb@z@lA~Bj@rAv@dBx@~ApAdCp@rAzBfEvBpEvB|EpCxFhBdEdAfCnC`HxBhFz@lBhAzBlAhCjAnBh@pAf@rAzAvD~@xBbAxBbBjDnCzFnDnHn@tATj@nArC|@dCn@dBN^Z|@n@hBnAfDnDjJpAjD`@bA^t@vBnDp@rAt@xA|AfDbA~Bz@xBr@dBfAbCd@pAlCjHvBzFv@~Bj@pAr@nAfAlBt@fA~@nAjApB~BnDv@vAbCpDxA~Bn@dAdAxBp@rARf@^|@j@~Aj@vAf@zAZfATv@ZdA\\~@f@xA^z@\\`A`A`Cn@fB^dAX|@ZfAz@xChApEjB|Gt@pCx@jCfCjHt@pBb@fAl@~AfA`Dl@hBbA`DxBvIvApG|ApHfAnFTpBJnBHfCAbB?`@Ch@El@OhAEf@ARA^?\\B\\Hd@Jd@pBtHxAzGvAjG~AvHbAbEvAbDz@nCvA`IvBxMtAlI\\dBV~@^fAl@tAp@fAt@~@|@x@nCbCf@d@`@j@r@pAb@fAd@~A~@lE\\~A\\fAf@hAh@`A~@rA`GvGlCrDlCtExG~M~IfR~ExH`ElIfFxKrBjElBjE`AnBpArCx@bBjAtBjAnBlBhCfBdC~@rAr@bAp@fAj@~@x@zAp@hAl@fAbAnB`AfB`BfDtA~C~BhF|CrGt@`Bn@fAf@t@`@h@j@p@f@j@x@`Aj@l@tAbBfBbCvB~ExA`Er@jCdAzFfAbG~@jDlChI\\lAl@hBn@|Ax@hBlAbCpArBvAnBhAnAx@x@lAdAbA|@lAfAn@n@`@b@b@n@`@p@^r@b@hAb@lAr@jB`@dAd@dAl@hAx@dA~@~@lG|FpAnAhI`Jt@x@~CbDxJvIlAxA`@n@dGhJh@p@TRZLVFV?ZAp@Ox@ULGhAm@l@YtAs@nAo@BCj@YXORITMjAo@HaGAKN@&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We write a function to convert the encoded route to a &lt;code&gt;SpatialLines&lt;/code&gt; object:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;decode &amp;lt;- function(str, multiplier=1e5){
   
   if (!require(bitops)) stop(&amp;quot;Package: bitops required.&amp;quot;)
   if (!require(sp)) stop(&amp;quot;Package: sp required.&amp;quot;)
   
   truck &amp;lt;- 0
   trucks &amp;lt;- c()
   carriage_q &amp;lt;- 0
   
   for (i in 0:(nchar(str)-1)){
      ch &amp;lt;- substr(str, (i+1), (i+1))
      x &amp;lt;- as.numeric(charToRaw(ch)) - 63
      x5 &amp;lt;- bitShiftR(bitShiftL(x, 32-5), 32-5)
      truck &amp;lt;- bitOr(truck, bitShiftL(x5, carriage_q))
      carriage_q &amp;lt;- carriage_q + 5
      islast &amp;lt;- bitAnd(x, 32) == 0
      if (islast){
         negative &amp;lt;- bitAnd(truck, 1) == 1
         if (negative) truck &amp;lt;- -bitShiftR(-bitFlip(truck), 1)/multiplier
         else truck &amp;lt;- bitShiftR(truck, 1)/multiplier
         trucks &amp;lt;- c(trucks, truck)
         carriage_q &amp;lt;- 0
         truck &amp;lt;- 0
      }
   }
   lat &amp;lt;- trucks[c(T,F)][-1]
   lng &amp;lt;- trucks[c(F,T)][-1]
   res &amp;lt;- data.frame(lat=c(trucks[1],cumsum(lat)+trucks[1]), 
                     lng=c(trucks[2],cumsum(lng)+trucks[2]))

   coordinates(res) &amp;lt;- ~lng+lat
   proj4string(res) &amp;lt;- CRS(&amp;quot;+init=epsg:4326&amp;quot;)
   return(SpatialLines(list(Lines(Line(res), 1)), CRS(&amp;quot;+init=epsg:4326&amp;quot;)))
}&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;par(mar=par()$mar-c(1,0,2.5,0), cex=0.8)
path &amp;lt;- decode(route$routes[[1]]$geometry, multiplier=1e5)
plot(path); axis(1); axis(2); box()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/routing/figures/plot-1.png&#34; width=&#34;810&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;using-leaflet-to-make-a-nicer-map&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Using &lt;code&gt;leaflet&lt;/code&gt; to make a nicer map&lt;/h1&gt;
&lt;p&gt;It is relatively easy to make a nice interactive map. Here we draw a simple &lt;a href=&#34;http://leafletjs.com/&#34;&gt;leaflet&lt;/a&gt; map, and overlay the origin and destination points, as well as the route between.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#make a string to nicely label the route
s &amp;lt;- route$routes[[1]]$duration
kms &amp;lt;- round(route$routes[[1]]$distance/1000, 1)
routelabel &amp;lt;- paste0(s%/%60, &amp;quot;m &amp;quot;, s%%60, &amp;quot;s , &amp;quot;, kms, &amp;quot;kms&amp;quot;)

#create a basic map
library(leaflet)
m &amp;lt;- leaflet(width=&amp;quot;100%&amp;quot;) %&amp;gt;% 
  addTiles()  %&amp;gt;% 
  addPolylines(data=path, popup=routelabel, color = &amp;quot;#000000&amp;quot;, opacity=1, weight = 3) %&amp;gt;%
  addMarkers(lng=o$lng, lat=o$lat, popup=origin$results[[1]]$formatted_address) %&amp;gt;%
  addMarkers(lng=d$lng, lat=d$lat, popup=destination$results[[1]]$formatted_address)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;m&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;htmlwidget-a637f0464010cda5fa7b&#34; style=&#34;width:100%;height:480px;&#34; class=&#34;leaflet html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-a637f0464010cda5fa7b&#34;&gt;{&#34;x&#34;:{&#34;options&#34;:{&#34;crs&#34;:{&#34;crsClass&#34;:&#34;L.CRS.EPSG3857&#34;,&#34;code&#34;:null,&#34;proj4def&#34;:null,&#34;projectedBounds&#34;:null,&#34;options&#34;:{}}},&#34;calls&#34;:[{&#34;method&#34;:&#34;addTiles&#34;,&#34;args&#34;:[&#34;//{s}.tile.openstreetmap.org/{z}/{x}/{y}.png&#34;,null,null,{&#34;minZoom&#34;:0,&#34;maxZoom&#34;:18,&#34;maxNativeZoom&#34;:null,&#34;tileSize&#34;:256,&#34;subdomains&#34;:&#34;abc&#34;,&#34;errorTileUrl&#34;:&#34;&#34;,&#34;tms&#34;:false,&#34;continuousWorld&#34;:false,&#34;noWrap&#34;:false,&#34;zoomOffset&#34;:0,&#34;zoomReverse&#34;:false,&#34;opacity&#34;:1,&#34;zIndex&#34;:null,&#34;unloadInvisibleTiles&#34;:null,&#34;updateWhenIdle&#34;:null,&#34;detectRetina&#34;:false,&#34;reuseTiles&#34;:false,&#34;attribution&#34;:&#34;&amp;copy; &lt;a href=\&#34;http://openstreetmap.org\&#34;&gt;OpenStreetMap\u003c/a&gt; contributors, &lt;a href=\&#34;http://creativecommons.org/licenses/by-sa/2.0/\&#34;&gt;CC-BY-SA\u003c/a&gt;&#34;}]},{&#34;method&#34;:&#34;addPolylines&#34;,&#34;args&#34;:[[[{&#34;lng&#34;:[175.08475,175.08475,175.08475,175.08477,175.08483,175.08468,175.08456,175.08445,175.08434,175.08424,175.08413,175.0835,175.08342,175.08332,175.08324,175.08307,175.08294,175.08282,175.08267,175.08238,175.08137,175.0812,175.08106,175.08094,175.08087,175.08081,175.08078,175.08063,175.08054,175.08047,175.08037,175.08023,175.08013,175.07996,175.07982,175.07965,175.07951,175.07938,175.07891,175.07875,175.07864,175.07858,175.07852,175.07848,175.07964,175.07974,175.07976,175.07973,175.07951,175.07949,175.07939,175.07933,175.07951,175.07962,175.08017,175.08129,175.08207,175.08285,175.08283,175.08282,175.08282,175.08283,175.08285,175.08287,175.08284,175.08256,175.08237,175.08208,175.08195,175.08189,175.08183,175.08178,175.08158,175.08144,175.08137,175.08131,175.08123,175.08119,175.08099,175.08032,175.07963,175.07926,175.07814,175.07734,175.07662,175.07635,175.07597,175.07539,175.0748,175.07444,175.07412,175.07375,175.07325,175.0728,175.07236,175.07122,175.07086,175.07053,175.0702,175.06993,175.06894,175.06824,175.06748,175.06695,175.06646,175.06569,175.06528,175.06515,175.06476,175.06446,175.06409,175.06363,175.063,175.06162,175.06021,175.05935,175.05824,175.05783,175.05572,175.05476,175.05392,175.05312,175.05236,175.05177,175.05122,175.05056,175.04992,175.04983,175.04818,175.04781,175.04749,175.04733,175.0468,175.04625,175.04556,175.04512,175.04474,175.04423,175.04373,175.04305,175.04218,175.04119,175.04047,175.04007,175.0398,175.03955,175.03937,175.03916,175.03894,175.03867,175.03841,175.03809,175.03775,175.03736,175.03694,175.03656,175.03615,175.03587,175.03549,175.03528,175.03506,175.03457,175.03389,175.03307,175.03229,175.03158,175.02903,175.0287,175.02851,175.02816,175.02752,175.02719,175.02675,175.0262,175.0257,175.02507,175.02376,175.02262,175.02169,175.02085,175.02015,175.01939,175.01886,175.01829,175.01775,175.01711,175.01682,175.01628,175.01584,175.01547,175.01472,175.01397,175.0134,175.01294,175.01233,175.01179,175.01112,175.0104,175.0098,175.00933,175.00891,175.00813,175.00768,175.00721,175.00684,175.00607,175.00547,175.00466,175.0042,175.00385,175.00334,175.00278,175.00215,175.00178,175.00132,175.00061,174.99974,174.9991,174.99874,174.99843,174.9981,174.99781,174.99753,174.9973,174.99689,174.99654,174.99621,174.99569,174.99521,174.99458,174.99387,174.99301,174.99248,174.99168,174.991,174.98983,174.98945,174.98909,174.98869,174.98827,174.98786,174.98762,174.98723,174.98679,174.98597,174.98557,174.98463,174.98396,174.9833,174.98267,174.98149,174.98021,174.97856,174.97808,174.97737,174.97665,174.97614,174.97547,174.97387,174.97194,174.97106,174.97075,174.96973,174.9686,174.96793,174.96718,174.96627,174.96504,174.96411,174.96299,174.96219,174.96094,174.95958,174.95869,174.95748,174.95642,174.95552,174.95451,174.95367,174.9528,174.95186,174.95058,174.94962,174.94878,174.94747,174.94692,174.94639,174.94575,174.94512,174.94425,174.94357,174.94257,174.94183,174.94084,174.94009,174.93962,174.93858,174.9377,174.93606,174.93434,174.93354,174.93297,174.93216,174.93125,174.93084,174.93021,174.92991,174.92984,174.92976,174.92946,174.92882,174.9284,174.92789,174.92741,174.92674,174.92632,174.92532,174.92427,174.92316,174.92191,174.92092,174.92024,174.91879,174.91762,174.91707,174.91645,174.91576,174.9152,174.91479,174.91437,174.91345,174.91284,174.91223,174.91137,174.91011,174.90859,174.90816,174.90794,174.9072,174.90653,174.90602,174.90586,174.90555,174.90502,174.90418,174.90236,174.9015,174.90116,174.90089,174.90001,174.89959,174.89914,174.8983,174.89766,174.89705,174.89654,174.89588,174.89547,174.89397,174.89271,174.89207,174.89166,174.89126,174.89071,174.89035,174.88995,174.88938,174.8885,174.88806,174.88717,174.88653,174.88618,174.88557,174.88515,174.88495,174.88464,174.88416,174.88372,174.88326,174.8829,174.88262,174.88227,174.88195,174.8815,174.8812,174.88087,174.88022,174.8797,174.87935,174.87904,174.87868,174.87791,174.87686,174.87543,174.8747,174.874,174.8725,174.87193,174.87157,174.87109,174.87028,174.86975,174.86894,174.86722,174.86585,174.86432,174.86312,174.86255,174.86199,174.86131,174.86081,174.86064,174.86043,174.8602,174.85983,174.85963,174.85953,174.85937,174.85922,174.85907,174.85888,174.85869,174.85714,174.85572,174.85438,174.85282,174.85184,174.85102,174.8503,174.84869,174.84632,174.84465,174.84414,174.84382,174.84346,174.84303,174.84267,174.84235,174.84206,174.8414,174.84121,174.84099,174.84058,174.84022,174.83974,174.83871,174.83823,174.83787,174.8375,174.83717,174.83675,174.83535,174.83445,174.83338,174.83098,174.8279,174.82633,174.82466,174.82261,174.82159,174.82057,174.82001,174.81927,174.81877,174.81818,174.81762,174.81693,174.81626,174.81584,174.8155,174.81514,174.81482,174.81436,174.81399,174.81363,174.81307,174.81255,174.81171,174.81091,174.80974,174.80836,174.80787,174.80751,174.80724,174.80703,174.80678,174.80656,174.80623,174.806,174.8055,174.80484,174.80372,174.80275,174.80205,174.80079,174.79949,174.79863,174.79698,174.79659,174.79606,174.79559,174.79506,174.7944,174.79382,174.79326,174.79286,174.79257,174.79222,174.79191,174.79155,174.79131,174.79113,174.79089,174.79064,174.79038,174.79001,174.78962,174.78908,174.78873,174.78838,174.78801,174.78766,174.78734,174.78607,174.78567,174.7839,174.78361,174.78279,174.78107,174.78062,174.78038,174.77857,174.77832,174.77822,174.77815,174.77811,174.77811,174.77812,174.7782,174.77831,174.77835,174.77858,174.77871,174.77897,174.77921,174.77923,174.77936,174.77944,174.77949,174.77956,174.7798,174.78109,174.78115,174.78114],&#34;lat&#34;:[-41.12501,-41.12494,-41.12486,-41.12477,-41.12437,-41.12435,-41.12431,-41.12425,-41.12419,-41.12411,-41.12402,-41.12345,-41.12339,-41.12334,-41.12329,-41.12323,-41.12321,-41.12319,-41.1232,-41.12321,-41.12346,-41.12353,-41.12361,-41.1237,-41.12383,-41.12396,-41.12418,-41.12469,-41.12485,-41.12497,-41.12507,-41.12517,-41.12521,-41.12526,-41.12528,-41.12526,-41.12522,-41.12517,-41.12486,-41.12473,-41.12458,-41.12446,-41.12424,-41.12402,-41.12351,-41.1234,-41.12327,-41.12306,-41.12226,-41.12219,-41.12204,-41.12198,-41.12186,-41.12179,-41.1214,-41.12062,-41.12012,-41.11967,-41.11965,-41.11962,-41.1196,-41.11957,-41.11955,-41.11953,-41.1195,-41.11922,-41.11902,-41.11872,-41.11856,-41.11844,-41.11834,-41.11817,-41.1171,-41.11631,-41.11584,-41.11555,-41.11542,-41.11531,-41.11533,-41.11541,-41.11545,-41.11549,-41.11558,-41.11564,-41.11571,-41.11574,-41.11577,-41.11582,-41.11588,-41.1159,-41.11592,-41.11593,-41.11594,-41.11593,-41.11591,-41.11586,-41.11585,-41.11585,-41.11588,-41.11589,-41.11594,-41.11599,-41.11607,-41.11611,-41.11614,-41.11617,-41.11619,-41.1162,-41.11621,-41.11622,-41.11622,-41.11623,-41.11621,-41.11613,-41.11611,-41.1161,-41.1161,-41.1161,-41.11609,-41.11611,-41.11614,-41.11622,-41.11631,-41.1164,-41.1165,-41.11664,-41.11679,-41.11682,-41.11736,-41.11751,-41.11763,-41.1177,-41.11793,-41.1182,-41.11858,-41.11884,-41.11908,-41.11941,-41.11976,-41.12025,-41.12088,-41.12161,-41.12212,-41.12242,-41.12258,-41.12268,-41.12273,-41.12278,-41.12281,-41.12284,-41.12283,-41.12278,-41.12273,-41.12268,-41.12265,-41.12267,-41.12273,-41.12281,-41.123,-41.12312,-41.12326,-41.12359,-41.12397,-41.12434,-41.12464,-41.12492,-41.12583,-41.12597,-41.12605,-41.1262,-41.12652,-41.12669,-41.12693,-41.1273,-41.12763,-41.1281,-41.12903,-41.12983,-41.13051,-41.13115,-41.13166,-41.1322,-41.13255,-41.1329,-41.13322,-41.13354,-41.13368,-41.13393,-41.13411,-41.13426,-41.13456,-41.13487,-41.13513,-41.13534,-41.13563,-41.13591,-41.13627,-41.13668,-41.13703,-41.13731,-41.13756,-41.13806,-41.13832,-41.13857,-41.13876,-41.13913,-41.13941,-41.13976,-41.13998,-41.14017,-41.14043,-41.14074,-41.14111,-41.14136,-41.14168,-41.1422,-41.14285,-41.14338,-41.14365,-41.14388,-41.14408,-41.14427,-41.14442,-41.14453,-41.14471,-41.14484,-41.14497,-41.14517,-41.14535,-41.14558,-41.1458,-41.14608,-41.14625,-41.14658,-41.14687,-41.1474,-41.14756,-41.14774,-41.14795,-41.1482,-41.14847,-41.14863,-41.14895,-41.14932,-41.15001,-41.15044,-41.15165,-41.15251,-41.15315,-41.15364,-41.15438,-41.1552,-41.15625,-41.15654,-41.157,-41.15742,-41.1577,-41.15804,-41.15867,-41.15951,-41.16004,-41.16022,-41.16096,-41.16194,-41.16264,-41.16346,-41.16424,-41.16512,-41.16574,-41.16658,-41.16722,-41.16823,-41.16934,-41.17,-41.17073,-41.17137,-41.17196,-41.17279,-41.17355,-41.17429,-41.17497,-41.17573,-41.17631,-41.1769,-41.17799,-41.17851,-41.17907,-41.17972,-41.18039,-41.18119,-41.18178,-41.18246,-41.18293,-41.18352,-41.18402,-41.1843,-41.18487,-41.18534,-41.18621,-41.18714,-41.18756,-41.18789,-41.18841,-41.18897,-41.18924,-41.18967,-41.18987,-41.18991,-41.18995,-41.19013,-41.19052,-41.19074,-41.19102,-41.19131,-41.19172,-41.19197,-41.19259,-41.19319,-41.19379,-41.19452,-41.19505,-41.1954,-41.19612,-41.19673,-41.19703,-41.1974,-41.19779,-41.19817,-41.19838,-41.19858,-41.19904,-41.19936,-41.1997,-41.2002,-41.20092,-41.2018,-41.20204,-41.20215,-41.20255,-41.20286,-41.2031,-41.20318,-41.20332,-41.20356,-41.20396,-41.20484,-41.20525,-41.20542,-41.20558,-41.20618,-41.20643,-41.2067,-41.20717,-41.20751,-41.20781,-41.20807,-41.20843,-41.20862,-41.20933,-41.20993,-41.21021,-41.21043,-41.21069,-41.21105,-41.21132,-41.21164,-41.21202,-41.21266,-41.21294,-41.2136,-41.21405,-41.21429,-41.21464,-41.21489,-41.21499,-41.21515,-41.21537,-41.21559,-41.21579,-41.21593,-41.21604,-41.21618,-41.21633,-41.21653,-41.21669,-41.21684,-41.21717,-41.21741,-41.21757,-41.2177,-41.21784,-41.21814,-41.21851,-41.21905,-41.21932,-41.21961,-41.22029,-41.22056,-41.22074,-41.22097,-41.22133,-41.22156,-41.2219,-41.22251,-41.22295,-41.22342,-41.22378,-41.22389,-41.22395,-41.224,-41.22399,-41.22399,-41.22397,-41.22394,-41.22386,-41.22383,-41.22382,-41.22381,-41.22381,-41.22383,-41.22388,-41.22394,-41.22451,-41.22496,-41.2254,-41.22588,-41.22622,-41.22666,-41.22696,-41.2274,-41.228,-41.22843,-41.22858,-41.2287,-41.22886,-41.22909,-41.22934,-41.22961,-41.22992,-41.23064,-41.23084,-41.23101,-41.23127,-41.23145,-41.23164,-41.23196,-41.23211,-41.23226,-41.23246,-41.23267,-41.23299,-41.23428,-41.23499,-41.2357,-41.23711,-41.23887,-41.23999,-41.24096,-41.24212,-41.2427,-41.24325,-41.24358,-41.24399,-41.24428,-41.24466,-41.24504,-41.24559,-41.24611,-41.24643,-41.24669,-41.24694,-41.24716,-41.24745,-41.2477,-41.24793,-41.24827,-41.2486,-41.24909,-41.24952,-41.25016,-41.25095,-41.25122,-41.25146,-41.25166,-41.25183,-41.25205,-41.25225,-41.25254,-41.25276,-41.25319,-41.25371,-41.25431,-41.25476,-41.25502,-41.25537,-41.25573,-41.25605,-41.25676,-41.25691,-41.25714,-41.25738,-41.25767,-41.25806,-41.25847,-41.25891,-41.25928,-41.25957,-41.25996,-41.2603,-41.26069,-41.26093,-41.2611,-41.26128,-41.26145,-41.26161,-41.26179,-41.26197,-41.26223,-41.2624,-41.26259,-41.26282,-41.26311,-41.26343,-41.26478,-41.26519,-41.26684,-41.26711,-41.26791,-41.2698,-41.27019,-41.27036,-41.27167,-41.27188,-41.27199,-41.27213,-41.27225,-41.27237,-41.27251,-41.27276,-41.27305,-41.27312,-41.27349,-41.27372,-41.27415,-41.27455,-41.27457,-41.27479,-41.27492,-41.27502,-41.27513,-41.27551,-41.27556,-41.27555,-41.27563]}]],null,null,{&#34;lineCap&#34;:null,&#34;lineJoin&#34;:null,&#34;clickable&#34;:true,&#34;pointerEvents&#34;:null,&#34;className&#34;:&#34;&#34;,&#34;stroke&#34;:true,&#34;color&#34;:&#34;#000000&#34;,&#34;weight&#34;:3,&#34;opacity&#34;:1,&#34;fill&#34;:false,&#34;fillColor&#34;:&#34;#000000&#34;,&#34;fillOpacity&#34;:0.2,&#34;dashArray&#34;:null,&#34;smoothFactor&#34;:1,&#34;noClip&#34;:false},&#34;28m 58.8s , 34.3kms&#34;,null,null,null,null]},{&#34;method&#34;:&#34;addMarkers&#34;,&#34;args&#34;:[-41.1250097,175.0845498,null,null,null,{&#34;clickable&#34;:true,&#34;draggable&#34;:false,&#34;keyboard&#34;:true,&#34;title&#34;:&#34;&#34;,&#34;alt&#34;:&#34;&#34;,&#34;zIndexOffset&#34;:0,&#34;opacity&#34;:1,&#34;riseOnHover&#34;:false,&#34;riseOffset&#34;:250},&#34;10 Aragon Grove, Kingsley Heights, Upper Hutt 5018, New Zealand&#34;,null,null,null,null,null,null]},{&#34;method&#34;:&#34;addMarkers&#34;,&#34;args&#34;:[-41.2756572,174.7811653,null,null,null,{&#34;clickable&#34;:true,&#34;draggable&#34;:false,&#34;keyboard&#34;:true,&#34;title&#34;:&#34;&#34;,&#34;alt&#34;:&#34;&#34;,&#34;zIndexOffset&#34;:0,&#34;opacity&#34;:1,&#34;riseOnHover&#34;:false,&#34;riseOffset&#34;:250},&#34;1 Pipitea St, Pipitea, Wellington 6011, New Zealand&#34;,null,null,null,null,null,null]}],&#34;limits&#34;:{&#34;lat&#34;:[-41.2756572,-41.11531],&#34;lng&#34;:[174.77811,175.08483]}},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;p&gt;It’s also relatively straight forward to use different base maps, and a nice demo of some other providers can be found &lt;a href=&#34;http://leaflet-extras.github.io/leaflet-providers/preview/&#34;&gt;here&lt;/a&gt;. For example:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;require(leaflet)
leaflet(width=&amp;quot;100%&amp;quot;, height=600) %&amp;gt;% 
  addTiles(urlTemplate=&amp;#39;http://{s}.tile.stamen.com/watercolor/{z}/{x}/{y}.png&amp;#39;) %&amp;gt;%
  addTiles(urlTemplate=&amp;#39;http://{s}.tile.openstreetmap.se/hydda/roads_and_labels/{z}/{x}/{y}.png&amp;#39;) %&amp;gt;%
  addPolylines(data=path, popup=routelabel, color = &amp;quot;#000000&amp;quot;, opacity=1, weight = 3) %&amp;gt;%
  addMarkers(lng=o$lng, lat=o$lat, popup=origin$results[[1]]$formatted_address) %&amp;gt;%
  addMarkers(lng=d$lng, lat=d$lat, popup=destination$results[[1]]$formatted_address)&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;htmlwidget-6e6207ca98ba5d22f4c9&#34; style=&#34;width:100%;height:600px;&#34; class=&#34;leaflet html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-6e6207ca98ba5d22f4c9&#34;&gt;{&#34;x&#34;:{&#34;options&#34;:{&#34;crs&#34;:{&#34;crsClass&#34;:&#34;L.CRS.EPSG3857&#34;,&#34;code&#34;:null,&#34;proj4def&#34;:null,&#34;projectedBounds&#34;:null,&#34;options&#34;:{}}},&#34;calls&#34;:[{&#34;method&#34;:&#34;addTiles&#34;,&#34;args&#34;:[&#34;http://{s}.tile.stamen.com/watercolor/{z}/{x}/{y}.png&#34;,null,null,{&#34;minZoom&#34;:0,&#34;maxZoom&#34;:18,&#34;maxNativeZoom&#34;:null,&#34;tileSize&#34;:256,&#34;subdomains&#34;:&#34;abc&#34;,&#34;errorTileUrl&#34;:&#34;&#34;,&#34;tms&#34;:false,&#34;continuousWorld&#34;:false,&#34;noWrap&#34;:false,&#34;zoomOffset&#34;:0,&#34;zoomReverse&#34;:false,&#34;opacity&#34;:1,&#34;zIndex&#34;:null,&#34;unloadInvisibleTiles&#34;:null,&#34;updateWhenIdle&#34;:null,&#34;detectRetina&#34;:false,&#34;reuseTiles&#34;:false}]},{&#34;method&#34;:&#34;addTiles&#34;,&#34;args&#34;:[&#34;http://{s}.tile.openstreetmap.se/hydda/roads_and_labels/{z}/{x}/{y}.png&#34;,null,null,{&#34;minZoom&#34;:0,&#34;maxZoom&#34;:18,&#34;maxNativeZoom&#34;:null,&#34;tileSize&#34;:256,&#34;subdomains&#34;:&#34;abc&#34;,&#34;errorTileUrl&#34;:&#34;&#34;,&#34;tms&#34;:false,&#34;continuousWorld&#34;:false,&#34;noWrap&#34;:false,&#34;zoomOffset&#34;:0,&#34;zoomReverse&#34;:false,&#34;opacity&#34;:1,&#34;zIndex&#34;:null,&#34;unloadInvisibleTiles&#34;:null,&#34;updateWhenIdle&#34;:null,&#34;detectRetina&#34;:false,&#34;reuseTiles&#34;:false}]},{&#34;method&#34;:&#34;addPolylines&#34;,&#34;args&#34;:[[[{&#34;lng&#34;:[175.08475,175.08475,175.08475,175.08477,175.08483,175.08468,175.08456,175.08445,175.08434,175.08424,175.08413,175.0835,175.08342,175.08332,175.08324,175.08307,175.08294,175.08282,175.08267,175.08238,175.08137,175.0812,175.08106,175.08094,175.08087,175.08081,175.08078,175.08063,175.08054,175.08047,175.08037,175.08023,175.08013,175.07996,175.07982,175.07965,175.07951,175.07938,175.07891,175.07875,175.07864,175.07858,175.07852,175.07848,175.07964,175.07974,175.07976,175.07973,175.07951,175.07949,175.07939,175.07933,175.07951,175.07962,175.08017,175.08129,175.08207,175.08285,175.08283,175.08282,175.08282,175.08283,175.08285,175.08287,175.08284,175.08256,175.08237,175.08208,175.08195,175.08189,175.08183,175.08178,175.08158,175.08144,175.08137,175.08131,175.08123,175.08119,175.08099,175.08032,175.07963,175.07926,175.07814,175.07734,175.07662,175.07635,175.07597,175.07539,175.0748,175.07444,175.07412,175.07375,175.07325,175.0728,175.07236,175.07122,175.07086,175.07053,175.0702,175.06993,175.06894,175.06824,175.06748,175.06695,175.06646,175.06569,175.06528,175.06515,175.06476,175.06446,175.06409,175.06363,175.063,175.06162,175.06021,175.05935,175.05824,175.05783,175.05572,175.05476,175.05392,175.05312,175.05236,175.05177,175.05122,175.05056,175.04992,175.04983,175.04818,175.04781,175.04749,175.04733,175.0468,175.04625,175.04556,175.04512,175.04474,175.04423,175.04373,175.04305,175.04218,175.04119,175.04047,175.04007,175.0398,175.03955,175.03937,175.03916,175.03894,175.03867,175.03841,175.03809,175.03775,175.03736,175.03694,175.03656,175.03615,175.03587,175.03549,175.03528,175.03506,175.03457,175.03389,175.03307,175.03229,175.03158,175.02903,175.0287,175.02851,175.02816,175.02752,175.02719,175.02675,175.0262,175.0257,175.02507,175.02376,175.02262,175.02169,175.02085,175.02015,175.01939,175.01886,175.01829,175.01775,175.01711,175.01682,175.01628,175.01584,175.01547,175.01472,175.01397,175.0134,175.01294,175.01233,175.01179,175.01112,175.0104,175.0098,175.00933,175.00891,175.00813,175.00768,175.00721,175.00684,175.00607,175.00547,175.00466,175.0042,175.00385,175.00334,175.00278,175.00215,175.00178,175.00132,175.00061,174.99974,174.9991,174.99874,174.99843,174.9981,174.99781,174.99753,174.9973,174.99689,174.99654,174.99621,174.99569,174.99521,174.99458,174.99387,174.99301,174.99248,174.99168,174.991,174.98983,174.98945,174.98909,174.98869,174.98827,174.98786,174.98762,174.98723,174.98679,174.98597,174.98557,174.98463,174.98396,174.9833,174.98267,174.98149,174.98021,174.97856,174.97808,174.97737,174.97665,174.97614,174.97547,174.97387,174.97194,174.97106,174.97075,174.96973,174.9686,174.96793,174.96718,174.96627,174.96504,174.96411,174.96299,174.96219,174.96094,174.95958,174.95869,174.95748,174.95642,174.95552,174.95451,174.95367,174.9528,174.95186,174.95058,174.94962,174.94878,174.94747,174.94692,174.94639,174.94575,174.94512,174.94425,174.94357,174.94257,174.94183,174.94084,174.94009,174.93962,174.93858,174.9377,174.93606,174.93434,174.93354,174.93297,174.93216,174.93125,174.93084,174.93021,174.92991,174.92984,174.92976,174.92946,174.92882,174.9284,174.92789,174.92741,174.92674,174.92632,174.92532,174.92427,174.92316,174.92191,174.92092,174.92024,174.91879,174.91762,174.91707,174.91645,174.91576,174.9152,174.91479,174.91437,174.91345,174.91284,174.91223,174.91137,174.91011,174.90859,174.90816,174.90794,174.9072,174.90653,174.90602,174.90586,174.90555,174.90502,174.90418,174.90236,174.9015,174.90116,174.90089,174.90001,174.89959,174.89914,174.8983,174.89766,174.89705,174.89654,174.89588,174.89547,174.89397,174.89271,174.89207,174.89166,174.89126,174.89071,174.89035,174.88995,174.88938,174.8885,174.88806,174.88717,174.88653,174.88618,174.88557,174.88515,174.88495,174.88464,174.88416,174.88372,174.88326,174.8829,174.88262,174.88227,174.88195,174.8815,174.8812,174.88087,174.88022,174.8797,174.87935,174.87904,174.87868,174.87791,174.87686,174.87543,174.8747,174.874,174.8725,174.87193,174.87157,174.87109,174.87028,174.86975,174.86894,174.86722,174.86585,174.86432,174.86312,174.86255,174.86199,174.86131,174.86081,174.86064,174.86043,174.8602,174.85983,174.85963,174.85953,174.85937,174.85922,174.85907,174.85888,174.85869,174.85714,174.85572,174.85438,174.85282,174.85184,174.85102,174.8503,174.84869,174.84632,174.84465,174.84414,174.84382,174.84346,174.84303,174.84267,174.84235,174.84206,174.8414,174.84121,174.84099,174.84058,174.84022,174.83974,174.83871,174.83823,174.83787,174.8375,174.83717,174.83675,174.83535,174.83445,174.83338,174.83098,174.8279,174.82633,174.82466,174.82261,174.82159,174.82057,174.82001,174.81927,174.81877,174.81818,174.81762,174.81693,174.81626,174.81584,174.8155,174.81514,174.81482,174.81436,174.81399,174.81363,174.81307,174.81255,174.81171,174.81091,174.80974,174.80836,174.80787,174.80751,174.80724,174.80703,174.80678,174.80656,174.80623,174.806,174.8055,174.80484,174.80372,174.80275,174.80205,174.80079,174.79949,174.79863,174.79698,174.79659,174.79606,174.79559,174.79506,174.7944,174.79382,174.79326,174.79286,174.79257,174.79222,174.79191,174.79155,174.79131,174.79113,174.79089,174.79064,174.79038,174.79001,174.78962,174.78908,174.78873,174.78838,174.78801,174.78766,174.78734,174.78607,174.78567,174.7839,174.78361,174.78279,174.78107,174.78062,174.78038,174.77857,174.77832,174.77822,174.77815,174.77811,174.77811,174.77812,174.7782,174.77831,174.77835,174.77858,174.77871,174.77897,174.77921,174.77923,174.77936,174.77944,174.77949,174.77956,174.7798,174.78109,174.78115,174.78114],&#34;lat&#34;:[-41.12501,-41.12494,-41.12486,-41.12477,-41.12437,-41.12435,-41.12431,-41.12425,-41.12419,-41.12411,-41.12402,-41.12345,-41.12339,-41.12334,-41.12329,-41.12323,-41.12321,-41.12319,-41.1232,-41.12321,-41.12346,-41.12353,-41.12361,-41.1237,-41.12383,-41.12396,-41.12418,-41.12469,-41.12485,-41.12497,-41.12507,-41.12517,-41.12521,-41.12526,-41.12528,-41.12526,-41.12522,-41.12517,-41.12486,-41.12473,-41.12458,-41.12446,-41.12424,-41.12402,-41.12351,-41.1234,-41.12327,-41.12306,-41.12226,-41.12219,-41.12204,-41.12198,-41.12186,-41.12179,-41.1214,-41.12062,-41.12012,-41.11967,-41.11965,-41.11962,-41.1196,-41.11957,-41.11955,-41.11953,-41.1195,-41.11922,-41.11902,-41.11872,-41.11856,-41.11844,-41.11834,-41.11817,-41.1171,-41.11631,-41.11584,-41.11555,-41.11542,-41.11531,-41.11533,-41.11541,-41.11545,-41.11549,-41.11558,-41.11564,-41.11571,-41.11574,-41.11577,-41.11582,-41.11588,-41.1159,-41.11592,-41.11593,-41.11594,-41.11593,-41.11591,-41.11586,-41.11585,-41.11585,-41.11588,-41.11589,-41.11594,-41.11599,-41.11607,-41.11611,-41.11614,-41.11617,-41.11619,-41.1162,-41.11621,-41.11622,-41.11622,-41.11623,-41.11621,-41.11613,-41.11611,-41.1161,-41.1161,-41.1161,-41.11609,-41.11611,-41.11614,-41.11622,-41.11631,-41.1164,-41.1165,-41.11664,-41.11679,-41.11682,-41.11736,-41.11751,-41.11763,-41.1177,-41.11793,-41.1182,-41.11858,-41.11884,-41.11908,-41.11941,-41.11976,-41.12025,-41.12088,-41.12161,-41.12212,-41.12242,-41.12258,-41.12268,-41.12273,-41.12278,-41.12281,-41.12284,-41.12283,-41.12278,-41.12273,-41.12268,-41.12265,-41.12267,-41.12273,-41.12281,-41.123,-41.12312,-41.12326,-41.12359,-41.12397,-41.12434,-41.12464,-41.12492,-41.12583,-41.12597,-41.12605,-41.1262,-41.12652,-41.12669,-41.12693,-41.1273,-41.12763,-41.1281,-41.12903,-41.12983,-41.13051,-41.13115,-41.13166,-41.1322,-41.13255,-41.1329,-41.13322,-41.13354,-41.13368,-41.13393,-41.13411,-41.13426,-41.13456,-41.13487,-41.13513,-41.13534,-41.13563,-41.13591,-41.13627,-41.13668,-41.13703,-41.13731,-41.13756,-41.13806,-41.13832,-41.13857,-41.13876,-41.13913,-41.13941,-41.13976,-41.13998,-41.14017,-41.14043,-41.14074,-41.14111,-41.14136,-41.14168,-41.1422,-41.14285,-41.14338,-41.14365,-41.14388,-41.14408,-41.14427,-41.14442,-41.14453,-41.14471,-41.14484,-41.14497,-41.14517,-41.14535,-41.14558,-41.1458,-41.14608,-41.14625,-41.14658,-41.14687,-41.1474,-41.14756,-41.14774,-41.14795,-41.1482,-41.14847,-41.14863,-41.14895,-41.14932,-41.15001,-41.15044,-41.15165,-41.15251,-41.15315,-41.15364,-41.15438,-41.1552,-41.15625,-41.15654,-41.157,-41.15742,-41.1577,-41.15804,-41.15867,-41.15951,-41.16004,-41.16022,-41.16096,-41.16194,-41.16264,-41.16346,-41.16424,-41.16512,-41.16574,-41.16658,-41.16722,-41.16823,-41.16934,-41.17,-41.17073,-41.17137,-41.17196,-41.17279,-41.17355,-41.17429,-41.17497,-41.17573,-41.17631,-41.1769,-41.17799,-41.17851,-41.17907,-41.17972,-41.18039,-41.18119,-41.18178,-41.18246,-41.18293,-41.18352,-41.18402,-41.1843,-41.18487,-41.18534,-41.18621,-41.18714,-41.18756,-41.18789,-41.18841,-41.18897,-41.18924,-41.18967,-41.18987,-41.18991,-41.18995,-41.19013,-41.19052,-41.19074,-41.19102,-41.19131,-41.19172,-41.19197,-41.19259,-41.19319,-41.19379,-41.19452,-41.19505,-41.1954,-41.19612,-41.19673,-41.19703,-41.1974,-41.19779,-41.19817,-41.19838,-41.19858,-41.19904,-41.19936,-41.1997,-41.2002,-41.20092,-41.2018,-41.20204,-41.20215,-41.20255,-41.20286,-41.2031,-41.20318,-41.20332,-41.20356,-41.20396,-41.20484,-41.20525,-41.20542,-41.20558,-41.20618,-41.20643,-41.2067,-41.20717,-41.20751,-41.20781,-41.20807,-41.20843,-41.20862,-41.20933,-41.20993,-41.21021,-41.21043,-41.21069,-41.21105,-41.21132,-41.21164,-41.21202,-41.21266,-41.21294,-41.2136,-41.21405,-41.21429,-41.21464,-41.21489,-41.21499,-41.21515,-41.21537,-41.21559,-41.21579,-41.21593,-41.21604,-41.21618,-41.21633,-41.21653,-41.21669,-41.21684,-41.21717,-41.21741,-41.21757,-41.2177,-41.21784,-41.21814,-41.21851,-41.21905,-41.21932,-41.21961,-41.22029,-41.22056,-41.22074,-41.22097,-41.22133,-41.22156,-41.2219,-41.22251,-41.22295,-41.22342,-41.22378,-41.22389,-41.22395,-41.224,-41.22399,-41.22399,-41.22397,-41.22394,-41.22386,-41.22383,-41.22382,-41.22381,-41.22381,-41.22383,-41.22388,-41.22394,-41.22451,-41.22496,-41.2254,-41.22588,-41.22622,-41.22666,-41.22696,-41.2274,-41.228,-41.22843,-41.22858,-41.2287,-41.22886,-41.22909,-41.22934,-41.22961,-41.22992,-41.23064,-41.23084,-41.23101,-41.23127,-41.23145,-41.23164,-41.23196,-41.23211,-41.23226,-41.23246,-41.23267,-41.23299,-41.23428,-41.23499,-41.2357,-41.23711,-41.23887,-41.23999,-41.24096,-41.24212,-41.2427,-41.24325,-41.24358,-41.24399,-41.24428,-41.24466,-41.24504,-41.24559,-41.24611,-41.24643,-41.24669,-41.24694,-41.24716,-41.24745,-41.2477,-41.24793,-41.24827,-41.2486,-41.24909,-41.24952,-41.25016,-41.25095,-41.25122,-41.25146,-41.25166,-41.25183,-41.25205,-41.25225,-41.25254,-41.25276,-41.25319,-41.25371,-41.25431,-41.25476,-41.25502,-41.25537,-41.25573,-41.25605,-41.25676,-41.25691,-41.25714,-41.25738,-41.25767,-41.25806,-41.25847,-41.25891,-41.25928,-41.25957,-41.25996,-41.2603,-41.26069,-41.26093,-41.2611,-41.26128,-41.26145,-41.26161,-41.26179,-41.26197,-41.26223,-41.2624,-41.26259,-41.26282,-41.26311,-41.26343,-41.26478,-41.26519,-41.26684,-41.26711,-41.26791,-41.2698,-41.27019,-41.27036,-41.27167,-41.27188,-41.27199,-41.27213,-41.27225,-41.27237,-41.27251,-41.27276,-41.27305,-41.27312,-41.27349,-41.27372,-41.27415,-41.27455,-41.27457,-41.27479,-41.27492,-41.27502,-41.27513,-41.27551,-41.27556,-41.27555,-41.27563]}]],null,null,{&#34;lineCap&#34;:null,&#34;lineJoin&#34;:null,&#34;clickable&#34;:true,&#34;pointerEvents&#34;:null,&#34;className&#34;:&#34;&#34;,&#34;stroke&#34;:true,&#34;color&#34;:&#34;#000000&#34;,&#34;weight&#34;:3,&#34;opacity&#34;:1,&#34;fill&#34;:false,&#34;fillColor&#34;:&#34;#000000&#34;,&#34;fillOpacity&#34;:0.2,&#34;dashArray&#34;:null,&#34;smoothFactor&#34;:1,&#34;noClip&#34;:false},&#34;28m 58.8s , 34.3kms&#34;,null,null,null,null]},{&#34;method&#34;:&#34;addMarkers&#34;,&#34;args&#34;:[-41.1250097,175.0845498,null,null,null,{&#34;clickable&#34;:true,&#34;draggable&#34;:false,&#34;keyboard&#34;:true,&#34;title&#34;:&#34;&#34;,&#34;alt&#34;:&#34;&#34;,&#34;zIndexOffset&#34;:0,&#34;opacity&#34;:1,&#34;riseOnHover&#34;:false,&#34;riseOffset&#34;:250},&#34;10 Aragon Grove, Kingsley Heights, Upper Hutt 5018, New Zealand&#34;,null,null,null,null,null,null]},{&#34;method&#34;:&#34;addMarkers&#34;,&#34;args&#34;:[-41.2756572,174.7811653,null,null,null,{&#34;clickable&#34;:true,&#34;draggable&#34;:false,&#34;keyboard&#34;:true,&#34;title&#34;:&#34;&#34;,&#34;alt&#34;:&#34;&#34;,&#34;zIndexOffset&#34;:0,&#34;opacity&#34;:1,&#34;riseOnHover&#34;:false,&#34;riseOffset&#34;:250},&#34;1 Pipitea St, Pipitea, Wellington 6011, New Zealand&#34;,null,null,null,null,null,null]}],&#34;limits&#34;:{&#34;lat&#34;:[-41.2756572,-41.11531],&#34;lng&#34;:[174.77811,175.08483]}},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;/div&gt;


&lt;!-- BLOGDOWN-HEAD

&lt;script src=&#34;#####content/post/routing_files/htmlwidgets/htmlwidgets.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;#####content/post/routing_files/jquery/jquery.min.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;#####content/post/routing_files/leaflet/leaflet.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;#####content/post/routing_files/leaflet/leaflet.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;#####content/post/routing_files/leafletfix/leafletfix.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;link href=&#34;#####content/post/routing_files/leaflet-label/leaflet.label.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;#####content/post/routing_files/leaflet-label/leaflet.label.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;#####content/post/routing_files/Proj4Leaflet/proj4-compressed.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;#####content/post/routing_files/Proj4Leaflet/proj4leaflet.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;#####content/post/routing_files/leaflet-binding/leaflet.js&#34;&gt;&lt;/script&gt;



/BLOGDOWN-HEAD --&gt;
</description>
    </item>
    
    <item>
      <title>Using R Packages to Disseminate Data</title>
      <link>/post/datapackages/</link>
      <pubDate>Wed, 20 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>/post/datapackages/</guid>
      <description>&lt;!-- BLOGDOWN-BODY-BEFORE

/BLOGDOWN-BODY-BEFORE --&gt;

&lt;p&gt;&lt;link rel=&#34;stylesheet&#34; type=&#34;text/css&#34; href=&#34;./css/custom.css&#34;&gt;&lt;/p&gt;
&lt;div id=&#34;introduction&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Introduction&lt;/h1&gt;
&lt;p&gt;R packages can include datasets, and it is very common to do so. This shouldn’t really come as a surprise–R is a statistical language in the end, and it is normal to include working examples with pacakges; and including datasets against which to run unit tests and other examples is clearly a useful thing to do.&lt;/p&gt;
&lt;p&gt;But datasets themselves aren’t central to most packages–statistical methodologies often are, and the data is there for testing or illustrative purposes. But this doesn’t have to be the case. For analysts familiar with R, consuming packages to obtain data might be quite convenient. But we can also bundle functionality specific to the included datasets, possibly increasing its overall utility. For example, one could include pre-canned statistical analyses in the form of simple helper functions or interactive &lt;code&gt;shiny&lt;/code&gt; applications.&lt;/p&gt;
&lt;p&gt;In this document, we look at a couple of datasets available from the &lt;a href=&#34;http://www.stats.govt.nz&#34;&gt;Statistics New Zealand&lt;/a&gt; website and consider the ways in which value might be added by disseminating this data via an R package (or set of packages) along with bundled demo apps.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;anatomy-of-an-r-package&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Anatomy of an R Package&lt;/h1&gt;
&lt;p&gt;An R package is essentially an eponymously named folder which bundles additional functionality in a standardised way, and which can be loaded on demand. A package contains, among other things, function and type definitions, documentation, and datasets.&lt;/p&gt;
&lt;p&gt;Traditionally, a loadable version of a package would be built from a source repository by running shell commands such as:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;R CMD INSTALL --build pkgname&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;or&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;R CMD build pkgname 
R CMD install pkgname.tar.gz&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;depending on the target platform. It is not all that difficult to build a modest package, but it can be tedious to construct packages from scratch. Large packages, on the other hand, can be difficult to build and manage. Those interested in the detail should refer to:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://cran.r-project.org/&#34;&gt;Writing R Extensions&lt;/a&gt;&lt;/p&gt;
&lt;div id=&#34;building-packages-in-rstudio&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Building packages in RStudio&lt;/h2&gt;
&lt;p&gt;RStudio has a number of productivity features which greatly assist the authoring of packages. RStudio allows users to work with projects, and packages can be authored by creating a project with type ‘R Package’:&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;./img/datapackages/package01.png&#34; alt=&#34;Project-&amp;gt;New Project…&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;Project-&amp;gt;New Project…&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;./img/datapackages/package02.png&#34; alt=&#34;Create Project&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;Create Project&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;./img/datapackages/package03.png&#34; alt=&#34;Project Type&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;Project Type&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;./img/datapackages/package04.png&#34; alt=&#34;Create R Package&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;Create R Package&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;When working on a package, RStudio provides a number of useful tools via a ‘Build’ menu. From there you can build the package and create source or binary packages for dissemination.&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;./img/datapackages/package05.png&#34; alt=&#34;Build menu&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;Build menu&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;In addition to this, help files can be built automatically from source code comments using the &lt;code&gt;roxygen2&lt;/code&gt; package. The traditional method is to make a markup file for each function that requires documentation, but using &lt;code&gt;roxygen2&lt;/code&gt; is far more convenient. We’ll see examples below, but for a reasonable overview see:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://r-pkgs.had.co.nz/man.html&#34;&gt;Object documentation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Finally, a package source code can be managed via either of git or subversion, which brings obvious advantage.&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;./img/datapackages/versioning.png&#34; alt=&#34;Version control&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;Version control&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;single-function-shiny-applications&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Single-function Shiny Applications&lt;/h1&gt;
&lt;p&gt;It is possible to make 1-page web applications in R via the &lt;code&gt;shiny&lt;/code&gt; package. There are a number of ways a &lt;code&gt;shiny&lt;/code&gt; application can be created, and RStudio tries to help out here as well.&lt;/p&gt;
&lt;p&gt;For example, selecting File → New File → Shiny Web App… in RStudio will cause RStudio to create a small working app which you can use as a starting point:&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;./img/datapackages/shiny01.png&#34; alt=&#34;Shiny web app&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;Shiny web app&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;./img/datapackages/shiny02.png&#34; alt=&#34;New Shiny Web Application&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;New Shiny Web Application&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;./img/datapackages/shiny03.png&#34; alt=&#34;Shiny application running within RStudio IDE&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;Shiny application running within RStudio IDE&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;A &lt;code&gt;shiny&lt;/code&gt; application is essentially made of a &lt;code&gt;ui&lt;/code&gt; component which contains the UI definition and a &lt;code&gt;server&lt;/code&gt; component which contains all the server-side logic for the application. Given these components, there are then a number of ways of creating and running an application. For example, one could create files &lt;code&gt;foo/ui.R&lt;/code&gt; and &lt;code&gt;foo/server.R&lt;/code&gt; which contain the &lt;code&gt;ui&lt;/code&gt; and &lt;code&gt;server&lt;/code&gt; components, respectively, and then run the application by calling:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;shiny::runApp(&amp;quot;foo&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Alternatively, if &lt;code&gt;ui&lt;/code&gt; and &lt;code&gt;server&lt;/code&gt; are actual R objects, one could run an application via&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;shiny::runApp(list(ui=ui, server=server))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;or even&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;shiny::shinyApp(ui=ui, server=server)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But, of course, we can then write a function which returns one of these application objects. For example&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;foo &amp;lt;- function(){
   shinyApp(ui=ui, server=server)
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;so that an application can be started, then, simply by calling:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;foo()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In fact, this is what we will do here. We will include functions in the packages we create which do nothing but cause a &lt;code&gt;shiny&lt;/code&gt; application to run. Thus, we can provide users with data, but also interactive applications that make use of that data.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;examplecensus-meshblock-dataset&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Example–Census Meshblock Dataset&lt;/h1&gt;
&lt;p&gt;For our first example, let us consider the Census Meshblock Dataset. From the &lt;a href=&#34;http://www.stats.govt.nz/Census/2013-census/data-tables/meshblock-dataset.aspx&#34;&gt;Statistics New Zealand website&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;2013 Census meshblock dataset contains counts at meshblock and other geographic levels for selected variables from the 2013, 2006, and 2001 Censuses. The geographies correspond to 2013 Census boundaries. The counts are at the highest level of each variable’s classification.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;The meshblock dataset is in Excel (.xlxs) and CSV format and can be integrated with analytical or mapping systems (using geographic boundary files), enabling further analysis of census data.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We’ll look specifically at the &lt;a href=&#34;http://www3.stats.govt.nz/meshblock/2013/csv/2013_mb_dataset_Total_New_Zealand_CSV.zip&#34;&gt;downloadable CSV file&lt;/a&gt;, primarily because the CSV file would be of the most universal use to any kind of data analyst (casual users might use the Excel version, but even those users might find it more useful to use the R version we’ll create here).&lt;/p&gt;
&lt;div id=&#34;repairing-reorganising-the-data&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Repairing / reorganising the data&lt;/h2&gt;
&lt;p&gt;This data has a number of organisational issues that impedes its use, so I spent a bit of time tidying things up and put the results in a package called &lt;a href=&#34;https://github.com/cmhh/NZCensus&#34;&gt;NZCensus&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;making-a-package&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Making a package&lt;/h2&gt;
&lt;p&gt;Here we make a simple package which does nothing but provide the following five datasets:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;datadictionary&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dwelling&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;household&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;family&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;individual&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That is, once installed, users can refer to any of these datasets by name if the package is loaded, or else load any of the datasets into memory by calling:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;data(dataset, package=&amp;quot;NZCensus&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that if all 5 datasets were loaded into memory, the total footprint would be 318MB. However, the package itself weighs in at 40.3MB–this compares favourably with the original CSV source (a zip file), which weighs in at 37.6MB.&lt;/p&gt;
&lt;p&gt;We use RStudio’s integrated support for packages to make this as easy as possible. We create a project called &lt;code&gt;NZCensus&lt;/code&gt;, which will also become the name of the package. The basic layout is as follows:&lt;/p&gt;
&lt;pre class=&#34;asis&#34;&gt;&lt;code&gt;NZCensus/data/datadictionary.rda
NZCensus/data/dwelling.rda
NZCensus/data/family.rda
NZCensus/data/household.rda
NZCensus/data/individual.rda
NZCensus/inst/doc/datadictionary.xlsx
NZCensus/inst/doc/datadictionary.ods
NZCensus/inst/doc/datadictionary.csv
NZCensus/man/datadictionary.Rd
NZCensus/man/dwelling.Rd
NZCensus/man/family.Rd
NZCensus/man/housheold.Rd
NZCensus/man/individual.Rd
NZCensus/R/data.R
NZCensus/DESCRIPTION
NZCensus/NAMESPACE&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;*.rda&lt;/code&gt; files are datasets in R’s native format, and are compressed. For example, the individual dataset is 209.8MB uncompressed in-memory. But this can be compressed and saved to disk by running:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;save(individual, file = &amp;quot;individual&amp;quot;, compress = TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;with the resulting file in this case being just 28.7MB.&lt;/p&gt;
&lt;p&gt;R packages are usually very well documented. Here, we take advantage of &lt;code&gt;doxygen2&lt;/code&gt; to build help files automatically from the package R scripts. In this case, we don’t actually have any R code, but we fake it anyway. We create entries for each dataset in a file called &lt;code&gt;./NZCensus/R/data.R&lt;/code&gt;. For example, for the &lt;code&gt;dwelling&lt;/code&gt; dataset we include the following:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#&amp;#39; New Zealand Census of Population and Dwellings dwelling data
#&amp;#39;
#&amp;#39; A dataset containing dwelling counts at various geographic levels.
#&amp;#39;
#&amp;#39; @format A data table with columns:
#&amp;#39; \describe{
#&amp;#39;   \item{geography}{Geographic level.  One of MB (meshblock), AU (area unit),
#&amp;#39;   Ward, TA (Territorial Authority), or RC (Regional Council).}
#&amp;#39;   \item{code}{Geography code.}
#&amp;#39;   \item{description}{Geography description.}
#&amp;#39;   \item{year}{Census year.  One of 2001, 2006, or 2013.}
#&amp;#39;   Other variables are documented in \code{\link{datadictionary}}.
#&amp;#39; }
#&amp;#39; @source
#&amp;#39; \url{http://www.stats.govt.nz/Census/2013-census/data-tables/meshblock-dataset.aspx}
&amp;quot;dwelling&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Processing this file yields, among other things, &lt;code&gt;NZCensus/man/dwelling.Rd&lt;/code&gt;, which is in R’s own documentation format. And after actually building and installing this package, an HTML version of this file is created which can be queried from R via something like:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;?NZCensus::dwelling&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;./img/datapackages/dwellinghelp.png&#34; alt=&#34;Help for dwelling dataset.&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;Help for &lt;code&gt;dwelling&lt;/code&gt; dataset.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Besides this, RStudio also automates the creation of other files, but several files were also created manually. For example, files were added to the folder &lt;code&gt;NZCensus/inst/doc/&lt;/code&gt;, and once the package has been installed, these are available from the main help page via the &lt;code&gt;User guides, package vignettes and other documentation.&lt;/code&gt; link.&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;./img/datapackages/NZCensushelp.png&#34; alt=&#34;help(package=&amp;quot;NZCensus&amp;quot;).&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;&lt;code&gt;help(package=&amp;quot;NZCensus&amp;quot;)&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;./img/datapackages/NZCensusdoc.png&#34; alt=&#34;NZCensus docs.&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;&lt;code&gt;NZCensus&lt;/code&gt; docs.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;In this case, these files are just versions of the &lt;code&gt;datadictionary&lt;/code&gt; dataset that can be opened in Excel or LibreOffice (what used to be known as OpenOffice).&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;extending-the-package&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Extending the package&lt;/h2&gt;
&lt;p&gt;Above, we wrapped five datasets up as a package which we called &lt;code&gt;NZCensus&lt;/code&gt;. We can add value to packages by bundling other interesting functions along with the data. For example, we could write a function that takes a particular variable name as input, and plots that variable for each Census year.&lt;/p&gt;
&lt;p&gt;In this case, we’ll create two functions that provide &lt;code&gt;shiny&lt;/code&gt; applications in the way described above:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mapdemo&lt;/code&gt; - an interactive map which displays a choropleth based on user input&lt;/li&gt;
&lt;li&gt;&lt;code&gt;distributiondemo&lt;/code&gt; - an barplot showing the distribution of a categorical variable selected by the user.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We place these functions in a new package called &lt;a href=&#34;https://github.com/cmhh/NZCensusDemos&#34;&gt;&lt;code&gt;NZCensusDemos&lt;/code&gt;&lt;/a&gt; which has an explicit dependency on the &lt;code&gt;NZCensus&lt;/code&gt; package, among others. The main reason for this is that we will bundle some additional spatial feature classes required to draw geographical features such as regional council areas on a map. The feature classes aren’t terribly large (we haven’t included, amusingly, given the product name, the meshblock feature class, which is pretty large), but at least this way users who only want the Census datasets aren’t burdened with the extra bulk implied by the demo package if they don’t want it. Similarly, the demos have dependencies which would need to be installed along with them, and loaded any time the demo package is. So, again, if users have no need for the demos, then they wouldn’t be forced to install these additional dependencies if they didn’t want them.&lt;/p&gt;
&lt;p&gt;Either way, the &lt;code&gt;mapdemo&lt;/code&gt; function, heavily edited, looks as follows:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mapdemo &amp;lt;- function(){
   shinyApp(
      ui = fluidPage(
         titlePanel(&amp;quot;Mapping Census...&amp;quot;),
         sidebarLayout(
            sidebarPanel(width=3,
               ...
            ),
            mainPanel(width=9,
               ...
            )
         )
      ),
      server = function(input, output){
         ...
      }
   )
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It can then be called via:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(NZCensusDemos)
mapdemo()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and looks as follows:&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;./img/datapackages/NZCensusMapDemo.png&#34; alt=&#34;NZCensusDemos::mapdemo()&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;&lt;code&gt;NZCensusDemos::mapdemo()&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Similarly, the &lt;code&gt;distributiondemo&lt;/code&gt; can be called via:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;distributiondemo()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and looks as follows:&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;./img/datapackages/NZCensusDistributionDemo.png&#34; alt=&#34;NZCensusDemos::distributiondemo()&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;&lt;code&gt;NZCensusDemos::distributiondemo()&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;examplehlfs-time-series-data&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Example–HLFS Time Series Data&lt;/h1&gt;
&lt;p&gt;Since looking at the Census meshblock dataset had convinced myself that putting data in R pacakges was a useful thing to do, I started thinking about other datasets for which this sort of treatment might also be useful.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.stats.govt.nz&#34;&gt;Statistics New Zealand&lt;/a&gt; puts bulk CSV files on their website containing a number of time series, and that seemed a reasonable choice. We can use this data to produce a &lt;code&gt;shiny&lt;/code&gt; application which lets users explore a range time series and make selections to plot.&lt;/p&gt;
&lt;div id=&#34;preparing-the-data-sets&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Preparing the data sets&lt;/h2&gt;
&lt;p&gt;The data I decided to use is labour market data found via the &lt;a href=&#34;http://www.stats.govt.nz/tools_and_services/releases_csv_files.aspx&#34;&gt;CSV files for download&lt;/a&gt; page here:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.stats.govt.nz/~/media/Statistics/Browse%20for%20stats/LabourMarketStatistics/HOTPMar16qtr/lms-mar16-zipped-csv-tables.zip&#34;&gt;Income and work&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The data consists of 14 columns, and 605535 rows. There isn’t any major problems with this data–it’s perfectly usable as it is. However there is a fair bit of duplication:&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;./img/datapackages/rawlabmkt.png&#34; alt=&#34;lots of duplication!&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;lots of duplication!&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Specifically, the &lt;code&gt;subject&lt;/code&gt;, &lt;code&gt;group&lt;/code&gt;, and title columns are unique by &lt;code&gt;series_reference&lt;/code&gt;. So, we split the table into two tables which have &lt;code&gt;series_reference&lt;/code&gt; as a common key, and remove as much duplication as possible. In addtion, we take the opportunity to cast the variable &lt;code&gt;Period&lt;/code&gt; to a genuine date-type variable.&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;./img/datapackages/metadata.png&#34; alt=&#34;metadata&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;metadata&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;./img/datapackages/labmkt.png&#34; alt=&#34;metadata&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;metadata&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;making-a-package-1&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Making a package&lt;/h2&gt;
&lt;p&gt;In this case, the data is relatively small, and for convenience we bundle the data and demos together. We create a package called &lt;a href=&#34;https://github.com/cmhh/SNZlabmkt&#34;&gt;&lt;code&gt;SNZlabmkt&lt;/code&gt;&lt;/a&gt; which contains the two data sets, &lt;code&gt;metadata&lt;/code&gt; and &lt;code&gt;labmkt&lt;/code&gt;, as well as a single function, &lt;code&gt;timeseriesdemo&lt;/code&gt;, which provides a &lt;code&gt;shiny&lt;/code&gt; application which plots time series based on user input. Since it has been discussed above, we skip the details of package creation here. But the demo is triggered by calling:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(SNZlabmkt)
timeseriesdemo()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and it looks as follows:&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;./img/datapackages/SNZlabmktTSDemo.png&#34; alt=&#34;timeseriesdemo()&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;&lt;code&gt;timeseriesdemo()&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;try-it-out&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Try it out…&lt;/h1&gt;
&lt;p&gt;The packages discussed here have all been uploaded to GitHub. RStudio has excellent integration with Git, as noted earlier, and allows users to use GitHub to set a remote repository.&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;./img/datapackages/git01.png&#34; alt=&#34;Git&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;Git&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;./img/datapackages/git02.png&#34; alt=&#34;Git&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;Git&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;./img/datapackages/git03.png&#34; alt=&#34;Git diff&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;Git diff&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;To install the packages:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;if (!require(devtools)) install.packages(&amp;quot;devtools&amp;quot;)
devtools::install_github(&amp;quot;cmhh/NZCensus&amp;quot;)
devtools::install_github(&amp;quot;cmhh/NZCensusDemos&amp;quot;)
devtools::install_github(&amp;quot;cmhh/SNZlabmkt&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If for some reason this fails, download each file manually through from:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/cmhh/NZCensus/archive/master.zip&#34;&gt;NZCensus&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/cmhh/NZCensusDemos/archive/master.zip&#34;&gt;NZCensusDemos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/cmhh/SNZlabmkt/archive/master.zip&#34;&gt;SNZlabmkt&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Then install each zip file in turn as follows:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;devtools::install_local(&amp;quot;path-to-zip/NZCensus-master.zip&amp;quot;)
devtools::install_local(&amp;quot;path-to-zip/NZCensusDemos-master.zip&amp;quot;)
devtools::install_local(&amp;quot;path-to-zip/SNZlabmkt-master.zip&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;!-- BLOGDOWN-HEAD




/BLOGDOWN-HEAD --&gt;
</description>
    </item>
    
    <item>
      <title>Web Services with Node.js</title>
      <link>/post/webservice/</link>
      <pubDate>Sat, 28 May 2016 00:00:00 +0000</pubDate>
      
      <guid>/post/webservice/</guid>
      <description>&lt;!-- BLOGDOWN-BODY-BEFORE

/BLOGDOWN-BODY-BEFORE --&gt;

&lt;p&gt;&lt;link rel=&#34;stylesheet&#34; type=&#34;text/css&#34; href=&#34;./css/custom.css&#34;&gt;&lt;/p&gt;
&lt;div id=&#34;what-is-node.js&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;What is node.js?&lt;/h1&gt;
&lt;p&gt;According to the &lt;a href=&#34;https://nodejs.org/en/&#34;&gt;Node.js website&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Node.js is a JavaScript runtime built on Chrome’s V8 JavaScript engine. Node.js uses an event-driven, non-blocking I/O model that makes it lightweight and efficient.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Node.js’ package ecosystem, npm, is the largest ecosystem of open source libraries in the world.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div id=&#34;event-driven-non-blocking-io-model&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Event-driven, non-blocking I/O model&lt;/h2&gt;
&lt;p&gt;Node.js program execution consists of a single-threaded event loop. But all I/O methods in the Node.js standard library have asynchronous versions which accept a callback. This is what is meant by non-blocking I/O. The event loop doesn’t wait for I/O to complete–the callback is executed when the I/O task is finished, but the event loop carries on happily executing other code in the mean time.&lt;/p&gt;
&lt;p&gt;Digging around on the web shows some of this is pretty poorly understood. For example, a lot of people fixate on the fact that the event loop is single threaded, and make erroneous assumptions regarding performance. However, Node.js is &lt;em&gt;not&lt;/em&gt; single-threaded–just the event loop. As long as the event loop isn’t blocked with CPU intensive tasks or synchronous I/O, then Node.js will generally deliver excellent performance.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;extensible&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Extensible&lt;/h2&gt;
&lt;p&gt;As mentioned, Node.js is extensible, with functionality added via packages.&lt;br /&gt;
There are currently over 280,000 packages available from npm! We can’t pretend that they’re all of a high quality, of course, but still…&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.npmjs.com/browse/star&#34;&gt;most starred&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.npmjs.com/browse/depended&#34;&gt;most dependent&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://github.com/sindresorhus/awesome-nodejs&#34;&gt;Awesome Node.js&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;http://npm-stat.com/charts.html&#34;&gt;npm-stat&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Here are the download counts for May 2016 for a few popular packages:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;async - 29,431,852&lt;/li&gt;
&lt;li&gt;lodash - 28,420,265&lt;/li&gt;
&lt;li&gt;commander - 20,670,541&lt;/li&gt;
&lt;li&gt;request - 14,928,496&lt;/li&gt;
&lt;li&gt;underscore - 11,911,351&lt;/li&gt;
&lt;li&gt;express - 6,321,315&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note that a package might not be a Node.js package per se, but rather a repackaging of some other popular Javascript library–&lt;code&gt;lodash&lt;/code&gt;, for example But this should only make the use of Node.js an even more attractive proposition since there are a great number of extremely useful Javascript libraries out there… why not make use of them if you can?&lt;/p&gt;
&lt;p&gt;Actually, it’s fun to look at download counts to get an idea of what’s popular. For example, &lt;code&gt;mysql&lt;/code&gt; provides a MySQL driver, and was downloaded 503,893 times; &lt;code&gt;pg&lt;/code&gt; provides bindings for PostgreSQL and was downloaded 389,851 times; and &lt;code&gt;mssql&lt;/code&gt; is a client for MS SQL Server and was downloaded 54,824 times.&lt;/p&gt;
&lt;p&gt;Among NoSQL options, &lt;code&gt;redis&lt;/code&gt;, a Redis client, was downloaded 1,827,226 times; &lt;code&gt;mongoose&lt;/code&gt;, a MongoDB modelling tool, was downloaded 684,530 times; and &lt;code&gt;cassandra-driver&lt;/code&gt;, a driver for Cassandra, was downloaded 28,385 times.&lt;/p&gt;
&lt;p&gt;This would imply that NoSQL databases, and key-value stores in particular, are very popular when it comes to building network applications with Node.&lt;/p&gt;
&lt;p&gt;Node.js comes bundled with &lt;code&gt;npm&lt;/code&gt;, the Node Package Manager, so installing a new package is straightforward:&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;npm install [-g] &amp;lt;package&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;postman-testing-apis&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Postman / Testing APIs&lt;/h1&gt;
&lt;p&gt;Before getting into it, it’s useful to think about how we would go about testing our web services.&lt;/p&gt;
&lt;p&gt;In an earlier post on OpenCPU we simply used the &lt;code&gt;curl&lt;/code&gt; command line utility. In this post we’ll instead use a useful Chrome extension called Postman.&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;./img/webservice/postman.png&#34; /&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;making-an-http-server&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Making an HTTP server&lt;/h1&gt;
&lt;p&gt;Before moving on to some useful practical examples, let us look at a few simple cases.&lt;/p&gt;
&lt;div id=&#34;simplest-possible-server&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Simplest possible server&lt;/h2&gt;
&lt;p&gt;The next listing shows the simplest possible webserver we can come up with (without using third-party modules). It does nothing but listen on port 3000, and sends the string “Hello, World!” in response to every request.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;server.js&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34;javascript&#34;&gt;&lt;code&gt;var http = require(&amp;quot;http&amp;quot;);

var server = http.createServer(function(request, response){
   response.write(&amp;quot;Hello, World!&amp;quot;);
   response.end();
});

server.listen(3000);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Since this is the first service we’re running, we note that we start it simply by executing:&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;node server&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;./img/webservice/0101.png&#34; /&gt;

&lt;/div&gt;
&lt;p&gt;It can also be fun to benchmark a service. You can do this with &lt;code&gt;ab&lt;/code&gt;, the ApacheBench tool, or &lt;code&gt;siege&lt;/code&gt;. For example, for the simple service above:&lt;/p&gt;
&lt;pre class=&#34;asis&#34;&gt;&lt;code&gt;cmhh@debian:~$ ab -kc 1000 -n 10000 http://debian:3000/
This is ApacheBench, Version 2.3 &amp;lt;$Revision: 1706008 $&amp;gt;
Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/
Licensed to The Apache Software Foundation, http://www.apache.org/

Benchmarking debian (be patient)
Completed 1000 requests
Completed 2000 requests
Completed 3000 requests
Completed 4000 requests
Completed 5000 requests
Completed 6000 requests
Completed 7000 requests
Completed 8000 requests
Completed 9000 requests
Completed 10000 requests
Finished 10000 requests


Server Software:        
Server Hostname:        debian
Server Port:            3000

Document Path:          /
Document Length:        14 bytes

Concurrency Level:      1000
Time taken for tests:   1.699 seconds
Complete requests:      10000
Failed requests:        0
Keep-Alive requests:    0
Total transferred:      890000 bytes
HTML transferred:       140000 bytes
Requests per second:    5884.73 [#/sec] (mean)
Time per request:       169.931 [ms] (mean)
Time per request:       0.170 [ms] (mean, across all concurrent requests)
Transfer rate:          511.47 [Kbytes/sec] received

Connection Times (ms)
              min  mean[+/-sd] median   max
Connect:        0   89 281.0      0    1040
Processing:     3   35  23.7     29     287
Waiting:        2   33  22.8     28     287
Total:         10  124 286.7     31    1300

Percentage of the requests served within a certain time (ms)
  50%     31
  66%     48
  75%     65
  80%     74
  90%    110
  95%   1065
  98%   1078
  99%   1095
 100%   1300 (longest request)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;While not the most sophisticated service, we processed the requests at an average of 5884 per second. Seems decent enough…&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;serving-a-file&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Serving a file&lt;/h2&gt;
&lt;p&gt;Now we consider a slightly more complicated example. In this case, we simply serve the file &lt;code&gt;index.html&lt;/code&gt;, a simple HTML landing page. If not found, we issue 404.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;server.js&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34;javascript&#34;&gt;&lt;code&gt;var http = require(&amp;#39;http&amp;#39;);
var fs = require(&amp;#39;fs&amp;#39;);

var server = http.createServer(function(request, response){
   if (request.method==&amp;quot;GET&amp;quot; &amp;amp;&amp;amp; request.url==&amp;quot;/&amp;quot;){
      response.writeHead(200, {&amp;#39;Content-Type&amp;#39;: &amp;#39;text/html&amp;#39;});
      fs.createReadStream(&amp;#39;./index.html&amp;#39;).pipe(response);
   }
   else{
      response.writeHead(404, {&amp;#39;Content-Type&amp;#39;: &amp;#39;text/html&amp;#39;});
      response.write(&amp;quot;&amp;amp;lt;h1&amp;amp;gt;404&amp;amp;lt;/h1&amp;amp;gt;&amp;amp;lt;p&amp;amp;gt;Sorry, bro.  There&amp;#39;s no such resource.&amp;amp;lt;/p&amp;amp;gt;&amp;quot;);
      response.end();
   }
})

server.listen(3000);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;index.html&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34;html&#34;&gt;&lt;code&gt;&amp;lt;pre&amp;gt;&amp;lt;code data-trim contenteditable class=&amp;quot;html hljs&amp;quot;
&amp;gt;&amp;amp;lt;html&amp;amp;gt;
&amp;amp;lt;head&amp;amp;gt;
   &amp;amp;lt;title&amp;amp;gt;Hello, World!&amp;amp;lt;/title&amp;amp;gt;
&amp;amp;lt;/head&amp;amp;gt;
&amp;amp;lt;body&amp;amp;gt;
   &amp;amp;lt;p&amp;amp;gt;Hello, World!&amp;amp;lt;/p&amp;amp;gt;
&amp;amp;lt;/body&amp;amp;gt;
&amp;amp;lt;/html&amp;amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;./img/webservice/0201.png&#34; /&gt;

&lt;/div&gt;
&lt;p&gt;In this example, more than twice the amount of data is transferred compared to the previous example, and so the throughput falls accordingly:&lt;/p&gt;
&lt;pre class=&#34;asis&#34;&gt;&lt;code&gt;cmhh@debian:~$ ab -kc 1000 -n 10000 http://debian:3000/
This is ApacheBench, Version 2.3 &amp;lt;$Revision: 1706008 $&amp;gt;
Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/
Licensed to The Apache Software Foundation, http://www.apache.org/

Benchmarking debian (be patient)
Completed 1000 requests
Completed 2000 requests
Completed 3000 requests
Completed 4000 requests
Completed 5000 requests
Completed 6000 requests
Completed 7000 requests
Completed 8000 requests
Completed 9000 requests
Completed 10000 requests
Finished 10000 requests


Server Software:        
Server Hostname:        debian
Server Port:            3000

Document Path:          /
Document Length:        101 bytes

Concurrency Level:      1000
Time taken for tests:   3.835 seconds
Complete requests:      10000
Failed requests:        0
Keep-Alive requests:    0
Total transferred:      2010000 bytes
HTML transferred:       1010000 bytes
Requests per second:    2607.54 [#/sec] (mean)
Time per request:       383.503 [ms] (mean)
Time per request:       0.384 [ms] (mean, across all concurrent requests)
Transfer rate:          511.83 [Kbytes/sec] received

Connection Times (ms)
              min  mean[+/-sd] median   max
Connect:        0  186 579.4      3    3009
Processing:    10  109  72.5     87     422
Waiting:        4   83  60.1     64     406
Total:         35  295 592.8     92    3426

Percentage of the requests served within a certain time (ms)
  50%     92
  66%    107
  75%    143
  80%    256
  90%   1092
  95%   1188
  98%   3092
  99%   3096
 100%   3426 (longest request)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We’re now down to a lowly 2607 requests per second!&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;serving-files&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Serving files&lt;/h2&gt;
&lt;p&gt;Now we make an even more flexible service–one capable of serving any file.&lt;br /&gt;
This time, however, we make use of the module &lt;code&gt;express&lt;/code&gt;. Brace yourself…&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;server.js&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34;javascript&#34;&gt;&lt;code&gt;var express = require(&amp;#39;express&amp;#39;);
var app = express();
app.use(express.static(__dirname + &amp;#39;/public&amp;#39;)).listen(3000);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The service will serve any file found in the &lt;code&gt;public&lt;/code&gt; folder, and will return an error for any file that does not exist.&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;./img/webservice/0301.png&#34; alt=&#34;found&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;found&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;./img/webservice/0302.png&#34; alt=&#34;not found&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;not found&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;code&gt;express.static&lt;/code&gt; is an example of &lt;em&gt;middleware&lt;/em&gt;. You simply pass the middleware to the &lt;code&gt;use&lt;/code&gt; method, and you can chain lots of different middleware together. You could add more folders, compress content, cache content, and so on. In fact, let’s add compression to the above example:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;server.js&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34;javascript&#34;&gt;&lt;code&gt;var express = require(&amp;#39;express&amp;#39;);
var compression = require(&amp;#39;compression&amp;#39;);
var app = express();

app.use(compression())
   .use(express.static(__dirname + &amp;#39;/public&amp;#39;))
   .listen(3000);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;practical-examples&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Practical Examples&lt;/h1&gt;
&lt;p&gt;Let us now ramp things up a little and work through a couple of (somewhat) realistic and practical examples. I thought of two that I thought would be fun:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;provide a set of endpoints to query the &lt;a href=&#34;http://www.stats.govt.nz/Census/2013-census/data-tables/meshblock-dataset.aspx#csv&#34;&gt;Census Meshblock datasets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;provide an endpoint for executing the X13-ARIMA-SEATS program&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This presentation consists of my first and only attempt to use node.js, so we’ll aim to keep things simple. In that spirit, arguments will be passed as part of the URI, for example:&lt;/p&gt;
&lt;pre class=&#34;html&#34;&gt;&lt;code&gt;/value1/value2/...&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Moreover, responses, when provided, will generally be plain text or JSON format, but that shouldn’t prove any real issue for consumption. And just as I’m not exactly an expert in Node.js, I’m not an expert in writing fully compliant RESTful services. For the examples here, I’ll assume the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;GET&lt;/code&gt; will yield a status of 200 on success, and will return content; and 404 on failure, with no content.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;POST&lt;/code&gt; will yield a status of 200 or 204 on success–200 if content is returned, and 204 if no content is returned; and 404 on failure, with no content.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DELETE&lt;/code&gt; will yield a status of 204 on success, and 404 on failure; no content will be returned in either case.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This may or may not conform to common practice, but that’s hardly the point.&lt;/p&gt;
&lt;div id=&#34;census-meshblock-service&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Census Meshblock service&lt;/h2&gt;
&lt;p&gt;In this example we are just serving data, so we first need to store the data where it can be easily retrieved by Node.js. There are a range of options available, but we choose to put the data in a MongoDB database in this case.&lt;/p&gt;
&lt;p&gt;If all we want to do is select meshblock data by meshblock code, then a key-value store like Redis might be sufficient, and would probably offer better performance. However, if we want to extend the example and allow more complicated queries, then MongoDB is a better option.&lt;/p&gt;
&lt;p&gt;As noted, the Census ‘meshblock’ data is not in a particularly usable state as is. So, I’ve imported the data and tidied it up, then put the tidied data in an R package called &lt;code&gt;NZCensus&lt;/code&gt;. This provides datasets such as the following:&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;./img/webservice/datadictionary.png&#34; alt=&#34;datadictionary&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;&lt;code&gt;datadictionary&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;./img/webservice/dwelling.png&#34; alt=&#34;dwelling&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;&lt;code&gt;dwelling&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The full set of datasets is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dwelling&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;household&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;family&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;individual&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;datadictionary&lt;/code&gt; - metadata describing columns in the above datasets&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Each dataset (excluding &lt;code&gt;datadictionary&lt;/code&gt;) contains data at a number of geographic levels: &lt;code&gt;MB&lt;/code&gt; - meshblock, &lt;code&gt;AU&lt;/code&gt; - area unit, &lt;code&gt;Ward&lt;/code&gt; - ward, &lt;code&gt;TA&lt;/code&gt; - territorial authority, &lt;code&gt;CMB&lt;/code&gt; - community board, and &lt;code&gt;RC&lt;/code&gt; - regional council.&lt;/p&gt;
&lt;p&gt;So, let’s aim for the following endpoints for the &lt;code&gt;datadictionary&lt;/code&gt; dataset:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/metadata&lt;/code&gt; - return the whole dataset&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/metadata/{column}&lt;/code&gt; - return metadata for column &lt;code&gt;column&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For the other datasets, let’s aim for:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/{dataset}/{MB|AU|Ward|TA|CMB|RC}/{code}&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For example, &lt;code&gt;/datadictionary/V0001&lt;/code&gt; will return the metadata for the column named &lt;code&gt;V0001&lt;/code&gt;. Similarly, &lt;code&gt;/dwelling/RC/01&lt;/code&gt; will return the ‘row’ of data from the &lt;code&gt;dwelling&lt;/code&gt; dataset corresponding to Northland regional council.&lt;/p&gt;
&lt;p&gt;Before making the service, though, we need to load the data into a database. We use MongoDB to store the data, and there’s a nice package in R called &lt;code&gt;mongolite&lt;/code&gt; which we can use to do the loading. As a simple example:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;loadmongodb.R&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(NZCensusLite)
library(mongolite)

m &amp;lt;- mongo(collection=&amp;quot;dwelling&amp;quot;, db=&amp;quot;census&amp;quot;)
m$insert(dwelling)

# and so on...&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As an aside, this is nice and generic and would work for any dataset–not a schema in sight! This, among other things, can be extrememly useful.&lt;br /&gt;
SQL Server is not the answer for absolutely every application that needs persistent storage, and using something else on occasion doesn’t necessarily diminish the value of relational database management systems. Something to think about (for those who haven’t given NoSQL options a look).&lt;/p&gt;
&lt;p&gt;Anyway, we can run a few queries to ensure our data is loaded:&lt;/p&gt;
&lt;pre class=&#34;asis&#34;&gt;&lt;code&gt;cmhh@debian:~$ mongo
MongoDB shell version: 2.4.14
connecting to: test
&amp;amp;gt; 
&amp;amp;gt; use census
switched to db census
&amp;amp;gt; 
&amp;amp;gt; db.dwelling.find({&amp;quot;geography&amp;quot;:&amp;quot;RC&amp;quot;, &amp;quot;code&amp;quot;:&amp;quot;01&amp;quot;, &amp;quot;year&amp;quot;:2013},
... {&amp;quot;code&amp;quot;:1, &amp;quot;description&amp;quot;: 1, &amp;quot;year&amp;quot;: 1, &amp;quot;V0001&amp;quot;:1})
{
    &amp;quot;_id&amp;quot; : ObjectId(&amp;quot;5753a9346e955210cf07bd90&amp;quot;),
    &amp;quot;code&amp;quot; : &amp;quot;01&amp;quot;,
    &amp;quot;description&amp;quot; : &amp;quot;Northland Region&amp;quot;,
    &amp;quot;year&amp;quot; : 2013,
    &amp;quot;V0001&amp;quot; : 47820
}
&amp;amp;gt; 
&amp;amp;gt; db.metadata.find({$or: [{&amp;quot;name&amp;quot;:&amp;quot;V0001&amp;quot;}, {&amp;quot;name&amp;quot;:&amp;quot;V0002&amp;quot;}]})
{
    &amp;quot;_id&amp;quot; : ObjectId(&amp;quot;5753a9a76e955210cf0e77d9&amp;quot;),
    &amp;quot;name&amp;quot; : &amp;quot;V0001&amp;quot;,
    &amp;quot;type&amp;quot; : &amp;quot;dwelling&amp;quot;,
    &amp;quot;subtype&amp;quot; : &amp;quot;dwelling&amp;quot;,
    &amp;quot;variable&amp;quot; : &amp;quot;Occupied private dwelling type&amp;quot;,
    &amp;quot;outcome&amp;quot; : &amp;quot;Separate House&amp;quot;,
    &amp;quot;notes&amp;quot; : &amp;quot;&amp;quot;
}
{
    &amp;quot;_id&amp;quot; : ObjectId(&amp;quot;5753a9a76e955210cf0e77da&amp;quot;),
    &amp;quot;name&amp;quot; : &amp;quot;V0002&amp;quot;,
    &amp;quot;type&amp;quot; : &amp;quot;dwelling&amp;quot;,
    &amp;quot;subtype&amp;quot; : &amp;quot;dwelling&amp;quot;,
    &amp;quot;variable&amp;quot; : &amp;quot;Occupied private dwelling type&amp;quot;,
    &amp;quot;outcome&amp;quot; : &amp;quot;Two or More Flats/Units/Townhouses/ Apartments/Houses Joined Together&amp;quot;,
    &amp;quot;notes&amp;quot; : &amp;quot;&amp;quot;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s look at a service where we define a single endpoint, &lt;code&gt;/metadata/column&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;server.js&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34;javascript&#34;&gt;&lt;code&gt;var express = require(&amp;#39;express&amp;#39;);
var app = express();
var assert = require(&amp;#39;assert&amp;#39;);
var client = require(&amp;#39;mongodb&amp;#39;).MongoClient;
var url = &amp;#39;mongodb://127.0.0.1:27017/census&amp;#39;;
var db;

client.connect(url, function(err, database) {
  assert.equal(null, err);
  db = database;
  app.listen(3000);
});

app.get(&amp;#39;/metadata/:name&amp;#39;, function(request, response){
   response.setHeader(&amp;#39;Content-Type&amp;#39;, &amp;#39;application/json&amp;#39;);
   db.collection(&amp;#39;metadata&amp;#39;).find({&amp;quot;name&amp;quot;: request.params.name}, function(err, items){
      var a = items.toArray(function(err, results){
         response.write(JSON.stringify(results));
         response.end();
      });
   });
});&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;./img/webservice/metadata01.png&#34; /&gt;

&lt;/div&gt;
&lt;p&gt;And, for giggles, let’s benchmark the service:&lt;/p&gt;
&lt;pre class=&#34;asis&#34;&gt;&lt;code&gt;cmhh@debian:~$ ab -kc 1000 -n 10000 http://debian:3000/V0001
This is ApacheBench, Version 2.3 &amp;lt;$Revision: 1706008 $&amp;gt;
Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/
Licensed to The Apache Software Foundation, http://www.apache.org/

Benchmarking debian (be patient)
Completed 1000 requests
Completed 2000 requests
Completed 3000 requests
Completed 4000 requests
Completed 5000 requests
Completed 6000 requests
Completed 7000 requests
Completed 8000 requests
Completed 9000 requests
Completed 10000 requests
Finished 10000 requests


Server Software:        
Server Hostname:        debian
Server Port:            3000

Document Path:          /V0001
Document Length:        18 bytes

Concurrency Level:      1000
Time taken for tests:   1.823 seconds
Complete requests:      10000
Failed requests:        0
Non-2xx responses:      10000
Keep-Alive requests:    10000
Total transferred:      2210000 bytes
HTML transferred:       180000 bytes
Requests per second:    5485.41 [#/sec] (mean)
Time per request:       182.302 [ms] (mean)
Time per request:       0.182 [ms] (mean, across all concurrent requests)
Transfer rate:          1183.86 [Kbytes/sec] received

Connection Times (ms)
              min  mean[+/-sd] median   max
Connect:        0   19 133.2      0    1006
Processing:    12   57  27.1     53     326
Waiting:       12   57  27.1     53     326
Total:         12   76 148.5     54    1330

Percentage of the requests served within a certain time (ms)
  50%     54
  66%     64
  75%     71
  80%     74
  90%     84
  95%     94
  98%    151
  99%   1092
 100%   1330 (longest request)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So, 5485 requests per second. Not too shabby…&lt;/p&gt;
&lt;p&gt;Now let’s add the &lt;code&gt;/metadata&lt;/code&gt; and &lt;code&gt;/dataset/&lt;/code&gt; endpoints:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;server.js&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34;javascript&#34;&gt;&lt;code&gt;var express = require(&amp;#39;express&amp;#39;);
var app = express();
var client = require(&amp;#39;mongodb&amp;#39;).MongoClient;
var url = &amp;#39;mongodb://127.0.0.1:27017/census&amp;#39;;
var db;

client.connect(url, function(err, database) {
  if (!err){
     db = database;
     app.listen(3000);
  }
});

app.get(&amp;#39;/metadata&amp;#39;, function(request, response){
   db.collection(&amp;#39;metadata&amp;#39;).find({}, function(err, items){
      if (!err){
         var a = items.toArray(function(err, results){
            if (!err){
               response.setHeader(&amp;#39;Content-Type&amp;#39;, &amp;#39;application/json&amp;#39;);
               response.statusCode = 200;
               response.write(JSON.stringify(results));
               response.end();
            }
            else{
               response.statusCode = 404;
               response.end();
            }
         });
      }
      else{
         response.statusCode = 404;
         response.end();
      }
   });
});

app.get(&amp;#39;/metadata/:name&amp;#39;, function(request, response){
   db.collection(&amp;#39;metadata&amp;#39;).find({&amp;quot;name&amp;quot;: request.params.name}, function(err, items){
      if (!err){
         var a = items.toArray(function(err, results){
            if (!err){
               response.setHeader(&amp;#39;Content-Type&amp;#39;, &amp;#39;application/json&amp;#39;);
               response.statusCode = 200;
               response.write(JSON.stringify(results));
               response.end();
            }
            else{
               response.statusCode = 404;
               response.end();
            }
         });
      }
      else {
         response.statusCode = 404;
         response.end();
      }
   });
});

app.get(&amp;#39;/:dataset/:geography/:code&amp;#39;, function(request, response){
   var dataset = request.params.dataset;
   var geography = request.params.geography;
   var code = request.params.code;
   var collection = db.collection(dataset);
   collection.find({&amp;quot;geography&amp;quot;:geography, &amp;quot;code&amp;quot;:code}, function(err, items){
      if (!err){
         var a = items.toArray(function(err, results){
            if (!err){
               response.setHeader(&amp;#39;Content-Type&amp;#39;, &amp;#39;application/json&amp;#39;);
               response.statusCode = 200;
               response.write(JSON.stringify(results));
               response.end();
            }
            else {
               response.statusCode = 404;
               response.end();
            }
         });
      }
      else {
         response.statusCode = 404;
         response.end();
      }
   });
});&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;./img/webservice/metadata02.png&#34; alt=&#34;/metadata/&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;&lt;code&gt;/metadata/&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;./img/webservice/dwelling01.png&#34; alt=&#34;/dwelling/RC/01&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;&lt;code&gt;/dwelling/RC/01&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;x13-arima-seats-service&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;X13-ARIMA-SEATS service&lt;/h2&gt;
&lt;p&gt;This example is somewhat more complicated. But, again, to keep things a little simple, we will assume that the required input for an adjustment is a single ‘&lt;code&gt;spc&lt;/code&gt;’ file containing both the raw data to be adjusted as well as the adjustment specifications. The &lt;code&gt;spc&lt;/code&gt; file will be submitted via a &lt;code&gt;POST&lt;/code&gt; request.&lt;/p&gt;
&lt;p&gt;Taking inspiration from &lt;a href=&#34;https://www.opencpu.org/&#34;&gt;OpenCPU&lt;/a&gt;, the result will be a series of endpoints available via a &lt;code&gt;GET&lt;/code&gt; request where each corresponds to a text file generated by the X13 program.&lt;/p&gt;
&lt;p&gt;For example, assume we upload &lt;code&gt;foo.spc&lt;/code&gt; and conduct an adjustment, and this yields the remote file &lt;code&gt;foo.d12&lt;/code&gt;. Then this file will be available via &lt;code&gt;/foo/d12&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Attempting to &lt;code&gt;POST&lt;/code&gt; an adjustment that has already been run will result in failure. But using the &lt;code&gt;DELETE&lt;/code&gt; method on &lt;code&gt;/foo&lt;/code&gt; will remove any trace of the adjustment from the server.&lt;/p&gt;
&lt;p&gt;To install X13-ARIMA-SEATS on Linux:&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;wget https://www.census.gov/ts/x13as/unix/x13assrc_V1.1_B26.tar.gz
tar -xvf x13assrc_V1.1_B26.tar.gz
make -f makefile.gf
sudo mv x13asv11b26o1 /usr/local/bin/x13as&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let us just use the &lt;code&gt;Testairline.spc&lt;/code&gt; file that comes bundled with the &lt;code&gt;x13as&lt;/code&gt; program (note that this &lt;code&gt;spc&lt;/code&gt; format looks like a prime candidate for conversion to some other format, such as JSON):&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;Testairline.spc&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34;asis&#34;&gt;&lt;code&gt;series{
  title=&amp;quot;International Airline Passengers Data from Box and Jenkins&amp;quot;
  start=1949.01
  data=(
    112 118 132 129 121 135 148 148 136 119 104 118
    115 126 141 135 125 149 170 170 158 133 114 140
    145 150 178 163 172 178 199 199 184 162 146 166
    171 180 193 181 183 218 230 242 209 191 172 194
    196 196 236 235 229 243 264 272 237 211 180 201
    204 188 235 227 234 264 302 293 259 229 203 229
    242 233 267 269 270 315 364 347 312 274 237 278
    284 277 317 313 318 374 413 405 355 306 271 306
    315 301 356 348 355 422 465 467 404 347 305 336
    340 318 362 348 363 435 491 505 404 359 310 337
    360 342 406 396 420 472 548 559 463 407 362 405
    417 391 419 461 472 535 622 606 508 461 390 432)
  span=(1952.01, )
}
spectrum{
  savelog=peaks 
}
transform{
  function=auto
  savelog=autotransform  
}
regression{
  aictest=(td easter)
  savelog=aictest  
}
automdl{  
  savelog=automodel  
}
outlier{ }
x11{
  save=(d10 d11 d12)
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here’s the full service:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;server.js&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34;javascript&#34;&gt;&lt;code&gt;var express = require(&amp;#39;express&amp;#39;);
var app = express();
var fs = require(&amp;#39;fs&amp;#39;);
var rimraf = require(&amp;#39;rimraf&amp;#39;);
var exec = require(&amp;#39;child_process&amp;#39;).exec;
var busboy = require(&amp;#39;connect-busboy&amp;#39;);
var path = require(&amp;#39;path&amp;#39;);

app.use(busboy());

app.post(&amp;#39;/adjust&amp;#39;, function(request, response){
   request.pipe(request.busboy);
   request.busboy.on(&amp;#39;file&amp;#39;, function(fieldname, file, filename){
      var fstream;
      var basename = path.basename(filename, path.extname(filename));
      fs.mkdir(__dirname  + &amp;#39;/work/&amp;#39; + basename, function(err){
         if (!err){
            fstream = fs.createWriteStream(__dirname + &amp;quot;/work/&amp;quot; + basename + &amp;#39;/&amp;#39; + filename);
            file.pipe(fstream);
            fstream.on(&amp;#39;close&amp;#39;, function(){
               var cmd = &amp;#39;cd &amp;#39; + __dirname + &amp;#39;/work/&amp;#39; + basename + &amp;#39; &amp;amp;&amp;amp; x13as &amp;#39; + basename;
               exec(cmd, function(error, stdout, stderr) {
                  if (!error){
                     response.statusCode = 200;
                     fs.readdir(__dirname + &amp;#39;/work/&amp;#39; + basename, function(err, files){
                        if (!err){
                           files.forEach(function(file){
                              var thisext = path.extname(file);
                              var thisbase = path.basename(file, thisext);
                              thisext = thisext.split(&amp;#39;.&amp;#39;).pop();
                              if (basename==thisbase) response.write(&amp;#39;/&amp;#39; + basename + &amp;#39;/&amp;#39; + thisext + &amp;#39;\n&amp;#39;);
                           });
                           response.end();
                        }
                     });
                  }
                  else{
                     response.statusCode = 404;
                     response.end();
                  }
               });
            });
         }
         else{
            response.statusCode = 404;
            response.end();
         }
      });
   });
});

app.delete(&amp;#39;/:series&amp;#39;, function(request, response){
   response.statusCcode = 404;
   var series = request.params.series;
   fs.stat(__dirname + &amp;#39;/work/&amp;#39; + series, function(err, stat){
      if (!err){
         rimraf(__dirname + &amp;#39;/work/&amp;#39; + series, function(err){
            if (!err){
               response.statusCode = 204;
               response.end();
            }
            else{
               response.statusCode = 404;
               response.end();
            }
         });
      }
      else{
         response.statusCode = 404;
         response.end();
      }
   });
});

app.get(&amp;#39;/:series/:output&amp;#39;, function(request, response){
   var series = request.params.series;
   var output = request.params.output;
   fs.stat(__dirname + &amp;#39;/work/&amp;#39; + series + &amp;#39;/&amp;#39; + series + &amp;#39;.&amp;#39; + output, function(err, stat){
      if (!err){
         response.statusCode = 200;
         response.setHeader(&amp;quot;Content-Type&amp;quot;, &amp;quot;text/html&amp;quot;);
         fs.createReadStream(__dirname + &amp;#39;/work/&amp;#39; + series + &amp;#39;/&amp;#39; + series + &amp;#39;.&amp;#39; + output).pipe(response);
      }
      else{
         response.statusCode = 404;
         response.end();
      }
   });
});

app.listen(3000);&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;./img/webservice/x13post.png&#34; alt=&#34;/adjust&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;&lt;code&gt;/adjust&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;./img/webservice/x13get01.png&#34; alt=&#34;/&amp;lt;output&amp;gt;/d11&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;&lt;code&gt;/&amp;lt;output&amp;gt;/d11&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;./img/webservice/x13get02.png&#34; alt=&#34;/&amp;lt;output&amp;gt;/out&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;&lt;code&gt;/&amp;lt;output&amp;gt;/out&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;./img/webservice/x13delete.png&#34; alt=&#34;/&amp;lt;output&amp;gt; - DELETE&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;&lt;code&gt;/&amp;lt;output&amp;gt;&lt;/code&gt; - &lt;code&gt;DELETE&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;And we might as well visualise the results:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;getandplot &amp;lt;- function(){
   if (!require(magrittr)) stop(&amp;quot;Nope.&amp;quot;)
   d10 &amp;lt;- read.table(&amp;quot;http://127.0.0.1:3000/Testairline/d10&amp;quot;, 
                     col.names=c(&amp;quot;date&amp;quot;, &amp;quot;d10&amp;quot;), skip=2)
   d11 &amp;lt;- read.table(&amp;quot;http://127.0.0.1:3000/Testairline/d11&amp;quot;, 
                     col.names=c(&amp;quot;date&amp;quot;, &amp;quot;d11&amp;quot;), skip=2)
   d12 &amp;lt;- read.table(&amp;quot;http://127.0.0.1:3000/Testairline/d12&amp;quot;, 
                     col.names=c(&amp;quot;date&amp;quot;, &amp;quot;d12&amp;quot;), skip=2)
   ap  &amp;lt;- ts((d10 %&amp;gt;% merge(d11) %&amp;gt;% merge(d12))[,-1], start=c(1952,1), frequency=12)
   plot(ap[,&amp;quot;d11&amp;quot;] * ap[,&amp;quot;d10&amp;quot;], xlab=&amp;quot;&amp;quot;, ylab=&amp;quot;&amp;quot;, lty=2)
   lines(ap[,&amp;quot;d11&amp;quot;])
   lines(ap[,&amp;quot;d12&amp;quot;], col=&amp;quot;grey&amp;quot;)
   legend(&amp;quot;topleft&amp;quot;, c(&amp;quot;actual&amp;quot;, &amp;quot;SA&amp;quot;, &amp;quot;trend&amp;quot;), 
          lty=c(2,1,1), col=c(&amp;quot;black&amp;quot;, &amp;quot;black&amp;quot;, &amp;quot;grey&amp;quot;), box.col=NA)
   box()
}&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;getandplot()&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;./img/webservice/plot.png&#34; /&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;summary&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Summary&lt;/h1&gt;
&lt;p&gt;We’ve touched on a few ideas here. Without advocating specifically for Node.js, we see that web services provide some useful use cases:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;they can provide an alternative to ‘traditional’ dissemination methods such as file downloads–particularly useful for those who only need a subset of the dataset at any one time&lt;/li&gt;
&lt;li&gt;they can be used to wrap existing programs, making them cross platform, and standardising input and output requirements.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The latter is particularly interesting, and you can imagine some obvious applications–CSPA, for example. In fact, I got curious and, for fun, Googled ‘Node.js CSPA’, and found the following:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/edwindj/cspa_rest&#34;&gt;Designing a REST interface for CSPA command line services&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;There is a PDF included:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/edwindj/cspa_rest/blob/master/doc/proposal_rest_interface.pdf&#34;&gt;Generic REST interface for CSPA services&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;We repeat the abstract here:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A generic REST interface is proposed which can be used by many of the services in CSPA. Furthermore, it is possible to develop a generic implementation which can be used to wrap the REST interface around an existing service making implementation much more simple. A generic interface used by most of the services would make it easier to implement systems that use the services.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Of course, web services can be written in any number of languages, including C# with ASP.NET, or Scala or Java with the Play framework. But Node.js has a lot going for it. It is easy to use, and there is an astonishing amount of code out there that we can borrow, free of charge.&lt;/p&gt;
&lt;p&gt;Finally, the other interesting thing we saw was MongoDB, a document database. MongoDB is a NoSQL database capable of storing massive amounts of data in binary JSON (BSON) format with a dynamic schema. It is fast, flexible, and reliable; and lends itself well to rapid development.&lt;/p&gt;
&lt;p&gt;You could argue that using a NoSQL database like MongoDB makes your applications easier to use for 3rd parties–they don’t have to have a specific RDBMS, create users, create databases, create tables with specific schemas, and so on.&lt;/p&gt;
&lt;p&gt;There are times when NoSQL databases like Redis or MongoDB are just much easier to use than a traditional RDBMS, and there really isn’t any good reason not to get on board. Horses for courses, and all that. They can be complementary to SQL, and time saved in development could easily offset any increased IT support required (which is a pretty specious assertion anyway).&lt;/p&gt;
&lt;/div&gt;


&lt;!-- BLOGDOWN-HEAD




/BLOGDOWN-HEAD --&gt;
</description>
    </item>
    
  </channel>
</rss>
