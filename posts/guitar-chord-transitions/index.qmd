---
title: "Guitar Chord Transitions with Vue.js"
author: "Chris Hansen"
date: "2022-08-29"
archives: "2022"
categories: [Vue.js]
tags: [Vue.js]
description: "A basic Vue.js component for rendering guitar chord diagrams, and for animating chord transitions."
image: assets/img/chordvuer.webp
---

<!-- <script src="https://cdnjs.cloudflare.com/ajax/libs/vue/3.2.36/vue.global.prod.min.js"></script> -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/vue/3.2.36/vue.global.min.js"></script>
<script src="./assets/js/chordvuer.umd.js"></script>
<link rel="stylesheet" href="./assets/css/style.css">

<style>
  .chord {
    height: 434px; 
    width:  320px; 
  }

  input[type=range] {
    min-width: 300px;
  }

  .controls {
    background-color: #eee;
    padding: 10px;
  }

  .controls select, .controls option, .controls input, .controls button {
    font-size: 90%;
  }

  .controls label {
    padding-right: 5px;
  }

  .controls button {
    margin-top: 5px;
    border-radius: 3px;
  }
</style>


# Overview

I'm not great with front-end stuff, but I quite like the idea of Vue.js components, and I dabble from time-to-time.  One thing I thought I'd attempt is a component that could be used to render a guitar chord diagram.  There are probably already decent examples--a quick Google turned up [vue-chords](https://madewithvuejs.com/vue-chords), for example.  However, I thought it would be interesting to create a component that showed the transition between two chords quite explicitly in order to help me visualise the change.  So, here goes...


# A Basic Vue.js Component

Throughout this post we'll use a small component library called `chordvuer`, the source of which can be found on [GitHub](https://github.com/cmhh/chordvuer).  This contains two basic components: `GuitarChord` (or `guitar-chord`) and `GuitarChordTransitions` (or `guitar-chord-transitions`).  


## `GuitarChord`

:::{.panel-tabset}

### output

```{=html}
<div id="app1">
  <guitar-chord 
    id="chord1" 
    :chord='{
      name: "D5",
      fingers: [
        {finger: 1, fret: 5, strings: [5]},
        {finger: 3, fret: 7, strings: [4]},
        {finger: 4, fret: 7, strings: [3]}
      ],
      open: [],
      closed: [6,2,1]
    }'
  ></guitar-chord>
</div>

<script>
  const app1 = Vue.createApp({})
  app1.component('guitar-chord', chordvuer.GuitarChord)
  app1.mount('#app1')
</script>
```

### source

```html
<GuitarChord 
  id="chord1" 
  :chord='{
    name: "G",
    fingers: [
      {finger: 1, fret: 2, strings: [5]},
      {finger: 2, fret: 3, strings: [6]},
      {finger: 3, fret: 3, strings: [2]},
      {finger: 4, fret: 3, strings: [1]}
    ],
    open: [3, 4],
    closed: []
  }'
>
```

:::


## `GuitarChordTransitions`

:::{.panel-tabset}

### output

```{=html}

<div id="app2">
  <guitar-chord-transitions
    id="chord2" 
    :chords="[this.chords['E'], this.chords['G'], this.chords['A'], this.chords['C']]"
    :duration="2000"
  ></guitar-chord-transitions>
</div>

<script>
  const app2 = Vue.createApp({})
  app2.config.globalProperties.chords = window.chordvuer.chords;
  app2.component('guitar-chord-transitions', chordvuer.GuitarChordTransitions)
  app2.mount('#app2')
</script>
```

### source

```html
<GuitarChordTransitions
  id="chord2" 
  ::chords="[this.chords['C'], this.chords['G'], this.chords['Am'], this.chords['F']]"
  :duration="2000"
>
```

:::

Note that chords are rendered as SVG, and much can be modified via CSS, including string colour, finger colours, fret colours, and so on.  For example, the fretboard colour could be changed for a chord with id `foo`:

```css
#foo .fretboard {
  fill: #eee;
}
```


# Storing Chords

The chord representation should be easy enough to understand, though entering them by hand would still get pretty tedious.  To make things a little easier, a small set of common chords are provided with the library in an object called `chordvuer.chords`.  Common fifths are stored in an object called `chordvuer.powerchords`.


# Choosing A Chord

As noted, the main goal was to show transitions between chords.  One simple example would just be to provide a set of chords via a drop-down box.  For example:

:::{.panel-tabset}

### output

```{=html}
<div id="app3">
  <div>
  <div class=controls>
  <label for="chord-name">Chord: </label>
  <select v-model="selected">
    <option v-for="(v, k) in chords" :value="k" :key="k" :selected="selected" >
      {{ v.name }}
    </option>
  </select>
  </div>
  <hr>
  <guitar-chord id="chord3" v-bind:chord="chords[this.selected]"></guitar-chord>
  </div> 
</div>

<script>
  const app3 = Vue.createApp({
    data () {
      return {
        selected: "A"
      }
    }
  })

  app3.config.globalProperties.chords = window.chordvuer.chords;
  app3.component('guitar-chord', chordvuer.GuitarChord)
  app3.mount('#app3')
</script>
```

### source

```html
<script src="https://cdnjs.cloudflare.com/ajax/libs/vue/3.2.36/vue.global.min.js"></script>
<script src="./assets/js/chordvuer.umd.js"></script>
<link rel="stylesheet" href="./assets/css/style.css">

<div id="app">
  <div>
  <label for="chord-name">Chord: </label>
  <select v-model="selected">
    <option v-for="(v, k) in chords" :value="k" :key="k" :selected="selected" >
      {{ v.name }}
    </option>
  </select>
  <hr>
  <guitar-chord 
    id="chord" 
    :chord="chords[this.selected]"
  ></guitar-chord>
  </div> 
</div>

<script>
  const app = Vue.createApp({
    data () {
      return {
        selected: "A"
      }
    }
  })

  app.config.globalProperties.chords = window.chordvuer.chords;
  app.component('guitar-chord', chordvuer.GuitarChord)
  app.mount('#app')
</script>
```

:::

Note the source is written to use the UMD version of the component library.  And please excuse the duplicates due to the separate entries for flats and sharps for the same chords.


# Transitions on a Loop

Let's do something similar to the above, but this time, let's allow users to build up a sequence of chord transitions by selecting things from a drop-down list (for example, select C, G, A Minor, then F): 

:::{.panel-tabset}

### output 

```{=html}
<div id="app4">
  <div class=controls>
    <label for="chord-name">Chord: </label>
    <select v-model="selected" >
      <option v-for="(v, k) in chords" :value="k" :key="k" >
        {{ v.name }}
      </option>
    </select>
    <br>
    <label for="dur">Transition speed (seconds): </label>
    <input type="number" min="1" max="5" v-model="speed">
    <br>
    Selections: {{ selectionStr }}
    <br>
    <button @click="reset()" >clear selections</button>
  </div>
  <hr>
  <guitar-chord-transitions 
    id="chord4" 
    :duration="this.speed * 1000" 
    :chords="selections"
  ></guitar-chord-transitions>
</div>

<script>
  const app4 = Vue.createApp({
    data () {
      return {
        selected: null,
        selections: [],
        speed: 1
      }
    },
    watch: {
      selected() {
        this.selections.push(this.chords[this.selected])
      }
    },
    computed: {
      selectionStr() {
        if (this.selections.length === 0) return ""
        return this.selections.map((x) => x.name).join(", ")
      }
    },
    methods: {
      reset() {
        this.selections = []
      }
    }
  })

  app4.config.globalProperties.chords = window.chordvuer.chords;
  app4.component('guitar-chord-transitions', chordvuer.GuitarChordTransitions)
  app4.mount('#app4')
</script>
```

### source

```html
<div id="app">
  <div class=controls>
    <label for="chord-name">Chord: </label>
    <select v-model="selected" >
      <option v-for="(v, k) in chords" :value="k" :key="k" >
        {{ v.name }}
      </option>
    </select>
    <br>
    <label for="dur">Transition speed (seconds): </label>
    <input type="number" min="1" max="5" v-model="speed">
    <br>
    Selections: {{ selectionStr }}
    <br>
    <button @click="reset()" >clear selections</button>
  </div>
  <hr>
  <guitar-chord-transitions 
    id="chord" 
    :duration="this.speed * 1000" 
    :chords="selections"
  ></guitar-chord-transitions>
</div>

<script>
  const app = Vue.createApp({
    data () {
      return {
        selected: null,
        selections: [],
        speed: 1
      }
    },
    watch: {
      selected() {
        this.selections.push(this.chords[this.selected])
      }
    },
    computed: {
      selectionStr() {
        if (this.selections.length === 0) return ""
        return this.selections.map((x) => x.name).join(", ")
      }
    },
    methods: {
      reset() {
        this.selections = []
      }
    }
  })

  app.config.globalProperties.chords = window.chordvuer.chords;
  app.component('guitar-chord-transitions', chordvuer.GuitarChordTransitions)
  app.mount('#app')
</script>
```

:::




