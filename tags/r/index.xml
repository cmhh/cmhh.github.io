<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>R on cmhh</title>
    <link>/tags/r/</link>
    <description>Recent content in R on cmhh</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 03 Mar 2022 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="/tags/r/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Deploying Shiny Applications</title>
      <link>/2022/2022-03-03-deploying-shiny-apps/</link>
      <pubDate>Thu, 03 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>/2022/2022-03-03-deploying-shiny-apps/</guid>
      <description>Overview In an earlier post, we discussed Shiny, a framework for building web applications using R, and suggested that we might be overdoing it a little. Whether true or not, Shiny is very popular indeed, and so I thought it would be fun to look at how one might go about deploying a Shiny application for public consumption. So, what follows is just a description of various deployment methods, but note that while Shiny is the focus, some of the deployment methods apply to more general scenarios–notably those approaches based upon containerisation.</description>
    </item>
    
    <item>
      <title>Too Much Shiny?!</title>
      <link>/2022/2022-01-20-too-much-shiny/</link>
      <pubDate>Thu, 20 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>/2022/2022-01-20-too-much-shiny/</guid>
      <description>--  Overview From the Shiny website:
 Shiny is an R package that makes it easy to build interactive web apps straight from R. You can host standalone apps on a webpage or embed them in R Markdown documents or build dashboards. You can also extend your Shiny apps with CSS themes, htmlwidgets, and JavaScript actions.
 Shiny is a wonderful tool, providing a low-entry option for R programmers to develop single-page web applications.</description>
    </item>
    
    <item>
      <title>Using PostGIS as a Spatial Backend for R</title>
      <link>/2020/2020-10-31-using-postgis-as-a-spatial-backend-for-r/</link>
      <pubDate>Sat, 31 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>/2020/2020-10-31-using-postgis-as-a-spatial-backend-for-r/</guid>
      <description>Overview R is a wildly extensible tool, and that extensibility means it can be used in a surprising array of domains. This versatility is great, but there are times when R is just not the best tool for the job–at least not by itself. Geospatial applications are a good example. Packages such as rgdal, sf, and raster make R quite usable in this domain, but R&amp;rsquo;s largely in-memory approach can make geoprocessing tasks involving large spatial objects a little challenging.</description>
    </item>
    
    <item>
      <title>Building Tile Services on-the-fly with GeoServer</title>
      <link>/2019/2019-09-17-building-tile-services-on-the-fly-with-geoserver/</link>
      <pubDate>Tue, 17 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>/2019/2019-09-17-building-tile-services-on-the-fly-with-geoserver/</guid>
      <description>Overview Interactive web applications can be a great way to present information to a diverse audience. If your interface is well designed and intuitive, then almost anybody will be able to use it. And where data has a spatial dimension, slippy maps can be an effective way of presenting information. But sometimes the objects we want to render are a bit on the large side. This means that our web browser can struggle to render all the required features, and it also means that mobile users of an app might end up using excessive amounts of data.</description>
    </item>
    
    <item>
      <title>Using R Packages to Disseminate Data</title>
      <link>/2016/2016-07-20-data-packages/</link>
      <pubDate>Wed, 20 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>/2016/2016-07-20-data-packages/</guid>
      <description>Introduction R packages can include datasets, and it is very common to do so. This shouldn’t really come as a surprise–R is a statistical language in the end, and it is normal to include working examples with pacakges; and including datasets against which to run unit tests and other examples is clearly a useful thing to do.
But datasets themselves aren’t central to most packages–statistical methodologies often are, and the data is there for testing or illustrative purposes.</description>
    </item>
    
  </channel>
</rss>
